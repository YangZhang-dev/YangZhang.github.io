import{_ as t,r as e,o as p,c,a as n,b as s,d as o,e as l}from"./app-20538318.js";const i={},u={href:"https://mp.weixin.qq.com/s?__biz=MzkyNTQ1MDI3Ng==&mid=2247501019&idx=1&sn=a946ccac4ffa8059a50db0ef317c6d7b&source=41#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},k=l(`<h2 id="jdk线程池" tabindex="-1"><a class="header-anchor" href="#jdk线程池" aria-hidden="true">#</a> JDK线程池</h2><p>jdk自带的线程池相关的知识参考<a href="./juc#%E7%BA%BF%E7%A8%8B%E6%B1%A0">jdk线程池</a>。</p><h2 id="快速消费线程池" tabindex="-1"><a class="header-anchor" href="#快速消费线程池" aria-hidden="true">#</a> 快速消费线程池</h2><p>快速消费线程池，顾名思义，即在任务到来时，需要尽可能的提前消费。也就是在核心线程都处于工作时，不去将任务放入队列中，而是创建非核心线程，当所有的线程都在工作时，才加入任务队列。</p><p>要想实现快速消费线程池，就要从任务队列的offer方法入手，因为在JDK线程池<code>ThreadPoolExecutor</code>中的<code>execute</code>方法中，如果核心线程都在工作时，会先去检查任务队列是否满了，如果满了才去创建非核心线程。</p><p>我们就要从这里入手，我们设计的任务队列在核心线程满了的时候就返回false，使得线程池直接创建非核心线程。如果线程全部分配完了，我们再执行真正的<code>offer</code>操作。</p><p>任务队列核心代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> runnable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> currentPoolThreadSize <span class="token operator">=</span> executor<span class="token punctuation">.</span><span class="token function">getPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 如果有核心线程正在空闲，将任务加入阻塞队列，由核心线程进行处理任务</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>executor<span class="token punctuation">.</span><span class="token function">getSubmittedTaskCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> currentPoolThreadSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 当前线程池线程数量小于最大线程数，返回 False，根据线程池源码，会创建非核心线程</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentPoolThreadSize <span class="token operator">&lt;</span> executor<span class="token punctuation">.</span><span class="token function">getMaximumPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 如果当前线程池数量大于最大线程数，任务加入阻塞队列</span>
    <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里需要线程池维护当前正在工作的线程数，采用原子整数防止线程安全问题：</p><p>线程池核心代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> submittedTaskCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSubmittedTaskCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> submittedTaskCount<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">afterExecute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    submittedTaskCount<span class="token punctuation">.</span><span class="token function">decrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 <span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> command<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    submittedTaskCount<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RejectedExecutionException</span> rex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果触发了拒绝策略，在执行拒绝策略之前，再尝试将任务放入队列一次</span>
        <span class="token class-name">TaskQueue</span> queue <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TaskQueue</span><span class="token punctuation">)</span> <span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">retryOffer</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                submittedTaskCount<span class="token punctuation">.</span><span class="token function">decrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RejectedExecutionException</span><span class="token punctuation">(</span><span class="token string">&quot;Queue capacity is full.&quot;</span><span class="token punctuation">,</span> rex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> iex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            submittedTaskCount<span class="token punctuation">.</span><span class="token function">decrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RejectedExecutionException</span><span class="token punctuation">(</span>iex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        submittedTaskCount<span class="token punctuation">.</span><span class="token function">decrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="拒绝策略" tabindex="-1"><a class="header-anchor" href="#拒绝策略" aria-hidden="true">#</a> 拒绝策略</h2><p>在这里可以通过动态代理的思想，对现有的拒绝策略进行扩展，十分的方便。</p><p>首先要创建我们的代理类，继承自<code>InvocationHandler</code>，重写其中的<code>invoke</code>方法，在其中可以维护一些其他的信息，比如触发拒绝策略的次数：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RejectedProxyInvocationHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * Target object
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> target<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * Reject count
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicLong</span> rejectCount<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        rejectCount<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;线程池执行拒绝策略, 此处模拟报警...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvocationTargetException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> ex<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代理类创建入口：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">RejectedExecutionHandler</span> <span class="token function">createProxy</span><span class="token punctuation">(</span><span class="token class-name">RejectedExecutionHandler</span> rejectedExecutionHandler<span class="token punctuation">,</span> <span class="token class-name">AtomicLong</span> rejectedNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 动态代理模式: 增强线程池拒绝策略，比如：拒绝任务报警或加入延迟队列重复放入等逻辑</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">RejectedExecutionHandler</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span>
        <span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>
        rejectedExecutionHandler<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">RejectedExecutionHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token class-name">RejectedProxyInvocationHandler</span><span class="token punctuation">(</span>rejectedExecutionHandler<span class="token punctuation">,</span> rejectedNum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="构建者模式" tabindex="-1"><a class="header-anchor" href="#构建者模式" aria-hidden="true">#</a> 构建者模式</h2><p>构建者模式可以很方便的帮助调用方设置参数，尤其是存在大量参数且部分参数是可选的情况。</p><p>以线程工厂举例，基于默认线程工厂，加入自定义的参数，大部分的参数都是可选的。</p><ul><li>首先创建<code>builder</code>静态方法，返回构建器。</li><li>设置一些可选参数，创建方法，并对其赋值（可以做一些参数校验之类的），并把对象返回。</li><li>创建<code>build</code>方法，创建实际工厂。</li></ul><p>同样线程池也可以通过构建者创建。</p><h2 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h2><p>最后，测试一下上面的代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 通过构建者创建线程工厂</span>
    <span class="token class-name">ThreadFactory</span> factory <span class="token operator">=</span> <span class="token class-name">ThreadFactoryBuilder</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">prefix</span><span class="token punctuation">(</span><span class="token string">&quot;zzys-&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 通过构建者创建快速消费线程池</span>
    <span class="token class-name">EagerThreadPoolExecutor</span> threadPoolExecutor <span class="token operator">=</span> <span class="token class-name">EagerThreadPoolBuilder</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">corePoolSize</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">maximumPoolSize</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">keepAliveTime</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span>
        <span class="token comment">// 注意要使用自定义的任务队列</span>
        <span class="token punctuation">.</span><span class="token function">workQueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TaskQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">threadFactory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 采用最普通的拒绝策略</span>
    <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>AbortPolicy</span> abortPolicy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>AbortPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">AtomicLong</span> rejectedNum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建拒绝策略代理类, 代理普通的抛出异常策略</span>
    <span class="token class-name">RejectedExecutionHandler</span> proxyRejectedExecutionHandler <span class="token operator">=</span> <span class="token class-name">RejectedProxyUtil</span><span class="token punctuation">.</span><span class="token function">createProxy</span><span class="token punctuation">(</span>abortPolicy<span class="token punctuation">,</span> rejectedNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    threadPoolExecutor<span class="token punctuation">.</span><span class="token function">setRejectedExecutionHandler</span><span class="token punctuation">(</span>proxyRejectedExecutionHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            threadPoolExecutor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">ThreadUtil</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100000L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;线程池中线程数目：{}，队列中等待执行的任务数目：{}&quot;</span><span class="token punctuation">,</span>
                     threadPoolExecutor<span class="token punctuation">.</span><span class="token function">getPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> threadPoolExecutor<span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ignored<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ignored<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;================ 线程池拒绝策略执行次数: &quot;</span> <span class="token operator">+</span> rejectedNum<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//14:17:13.456 [main] INFO com.zzys.railway.framework.starter.common.threadpool.proxy.RejectedProxyUtil -- 线程池中线程数目：1，队列中等待执行的任务数目：0</span>
<span class="token comment">//14:17:13.462 [main] INFO com.zzys.railway.framework.starter.common.threadpool.proxy.RejectedProxyUtil -- 线程池中线程数目：2，队列中等待执行的任务数目：0</span>
<span class="token comment">//14:17:13.462 [main] INFO com.zzys.railway.framework.starter.common.threadpool.proxy.RejectedProxyUtil -- 线程池中线程数目：3，队列中等待执行的任务数目：0</span>
<span class="token comment">//14:17:13.462 [main] INFO com.zzys.railway.framework.starter.common.threadpool.proxy.RejectedProxyUtil -- 线程池中线程数目：3，队列中等待执行的任务数目：1</span>
<span class="token comment">//14:17:13.462 [main] ERROR //com.zzys.railway.framework.starter.common.threadpool.proxy.RejectedProxyInvocationHandler -- 线程池执行拒绝策略, 此处模拟报警...</span>
<span class="token comment">//================ 线程池拒绝策略执行次数: 1</span>
<span class="token comment">//java.util.concurrent.RejectedExecutionException: Queue capacity is full.</span>
<span class="token comment">//...</span>
<span class="token comment">//...</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,25);function r(d,m){const a=e("ExternalLinkIcon");return p(),c("div",null,[n("p",null,[s("本文通过jdk的线程池构建一个快速消费线程池，并且采用动态代理扩展拒绝策略，使用构建者模式创建线程池。参考自"),n("a",u,[s("如何解决JDK线程池中不超过最大线程数下快速消费任务"),o(a)])]),k])}const b=t(i,[["render",r],["__file","快速消费线程池.html.vue"]]);export{b as default};
