import{_ as e,o as l,c as i,e as n,a as s,b as a}from"./app-20538318.js";const t={},p=n(`<p>本章介绍了汇编语言的基础，讲解了机器级编程的概念</p><h2 id="_1-过程" tabindex="-1"><a class="header-anchor" href="#_1-过程" aria-hidden="true">#</a> 1. 过程</h2><p>过程将一段代码封装，用一组指定的参数和一个返回值实现了某种功能，是一种很重要的抽象。</p><p>假设过程P调用过程Q，Q执行后返回P，在这个过程中，包含以下动作：</p><ul><li>传递控制：在进入Q时，PC必须被设置为Q的代码的起始地址，在返回的时候，PC要设置为P调用Q后面那条指令的地址。</li><li>传递数据：P必须能向Q提供一个或多个参数，Q向P返回一个值。</li><li>分配和释放内存：在开始时，Q可能需要为局部变量分配空间，而在返回时，需要释放这些存储空间。</li></ul><h3 id="_1-1-运行时栈" tabindex="-1"><a class="header-anchor" href="#_1-1-运行时栈" aria-hidden="true">#</a> 1.1 运行时栈</h3><p>c语言的过程调用机制的一个关键特征在于使用了栈数据结构提供的先进后出的内存管理原则。在P调用Q时，Q在执行中，P以及P以上的调用链，都是被暂时挂起的。当Q运行时，它可以分配局部变量，或调用新的过程。同时当Q返回时，所有的局部变量的内存空间都要被释放。</p><p>所以，程序可以使用栈来管理它的过程所需要的内存空间，栈和程序寄存器存放着传递控制和数据，分配内存所需要的信息。</p><p><img src="https://blog-zzys.oss-cn-beijing.aliyuncs.com/articles/stack.png" alt="" loading="lazy"></p><p>x86-64的栈是向低地址方向增长，栈指针%rsp指向栈顶元素，使用pushq和popq操作栈顶。</p><p>当x86-64的过程所需要的存储空间超出寄存器能存放的大小时，就会在栈上分配空间，被称为栈帧。当前执行的过程总是在栈顶，当P调用Q时，会把返回地址压入栈中，一般将其看作P的栈帧中的一部分。</p><p>通过寄存器，过程P最多可以传送六个参数（整数值），如果需要更多的参数，就需要在自己的栈帧中存储好这些参数。</p><p>当所有的局部变量都可以存放在寄存器中，并且不会去调用其他的过程，那么就不会用到栈。</p><blockquote><p>%rbp 被称为帧指针(base pointer)，在栈帧时不定长的时候需要使用，具体见P201</p></blockquote><h3 id="_1-2-转移控制" tabindex="-1"><a class="header-anchor" href="#_1-2-转移控制" aria-hidden="true">#</a> 1.2 转移控制</h3><p>将控制从过程P转移到过程Q只需要将PC设置为Q的代码起始地址。这个操作时由<code>call</code>指令实现的，调用过程Q即是<code>call Q</code>。和跳转相同，可以是直接的也可以是间接的。</p><h3 id="_1-3-数据传送" tabindex="-1"><a class="header-anchor" href="#_1-3-数据传送" aria-hidden="true">#</a> 1.3 数据传送</h3><p>在x86-64中，寄存器最多传递六个整形参数，寄存器的使用是由顺序的，同时可以访问寄存器的适当部分来访问小于64位的参数。下图是传递参数的寄存器：</p><p><img src="https://blog-zzys.oss-cn-beijing.aliyuncs.com/articles/register.jpg" alt="" loading="lazy"></p><p>当参数大于六个时，就只能通过栈传递，参数7位于较低地址处，参数n位于较高的地址。同时，所有的数据大小都向8（字节）的倍数对齐，此部分就是参数构造区。下面是一个例子：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">proc</span><span class="token punctuation">(</span><span class="token keyword">long</span> a1<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token operator">*</span>a1p<span class="token punctuation">,</span>
          <span class="token keyword">int</span> a2<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>a2p<span class="token punctuation">,</span>
          <span class="token keyword">short</span> a3<span class="token punctuation">,</span> <span class="token keyword">short</span> <span class="token operator">*</span>a3p<span class="token punctuation">,</span>
          <span class="token keyword">char</span> a4<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>a4p<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token operator">*</span>a1p <span class="token operator">+=</span> a1<span class="token punctuation">;</span>
    <span class="token operator">*</span>a2p <span class="token operator">+=</span> a2<span class="token punctuation">;</span>
    <span class="token operator">*</span>a3p <span class="token operator">+=</span> a3<span class="token punctuation">;</span>
    <span class="token operator">*</span>a4p <span class="token operator">+=</span> a4<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-assembly line-numbers-mode" data-ext="assembly"><pre class="language-assembly"><code>proc:
	movq	16(%rsp), %rax
	addq	%rdi, (%rsi)
	addl	%edx, (%rcx)
	addw	%r8w, (%r9)
	movl	8(%rsp), %edx
	addb	%dl, (%rax)
	ret
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>很明显，在获取前六个参数的值时，是通过直接寻址和间接寻址找到的，在第二行和倒数第三行是通过栈来获取参数7和参数8。并且char类型的参数也被编译为了8位字节，注意%rsp存放的是返回地址，8(%rsp)存放的才是第七个参数。</p><h3 id="_1-4-栈上的局部存储" tabindex="-1"><a class="header-anchor" href="#_1-4-栈上的局部存储" aria-hidden="true">#</a> 1.4 栈上的局部存储</h3><p>有些时候局部数据必须存放在内存中，常见的情况有：</p><ul><li>寄存器不足以存放所有的本地数据</li><li>对一个局部变量使用<code>&amp;</code>运算符，因此必须为它产生一个地址</li><li>某些局部变量是数组或结构，因此必须能够通过能通过引用访问到</li></ul><p>在这里使用了leaq的第二个用法，它看上去是从内存读数据到寄存器，实际上它是将内存的有效地址放入寄存器中。</p><p>具体的例子详见p172。</p><h3 id="_1-5-寄存器中的局部存储空间" tabindex="-1"><a class="header-anchor" href="#_1-5-寄存器中的局部存储空间" aria-hidden="true">#</a> 1.5 寄存器中的局部存储空间</h3><p>寄存器组是唯一被所有过程共享的资源，虽然在给定时刻只有一个过程是活动的，但我们仍需保证当一个过程调用一个过程时，被调用者不会覆盖调用者稍后会使用的寄存器的值。</p><p>根据惯例：寄存器%rbx，%rbp和%r12~%r15被划分为<strong>被调用者保存寄存器</strong>，当P调用Q时，Q必须保证寄存器的值和调用之前的值相同。要么不改变它，要么把原始的值压入栈中，改变寄存器的值，最后从栈中弹出旧值。</p><p>除了以上的寄存器和栈指针寄存器%rsp以外，都叫做<strong>调用者保存寄存器</strong>，在P调用Q时，Q可以随意改动这些寄存器的值。</p><p>所以一般过程都会选择先保存（pushq）要使用的被调用者保存寄存器，然后进行自己的运算，最后再存回去（popq），这样如果自己也需要调用其他的过程时，本身的数据也会被下一个过程所保存。</p><h3 id="_1-6-递归过程" tabindex="-1"><a class="header-anchor" href="#_1-6-递归过程" aria-hidden="true">#</a> 1.6 递归过程</h3><p>由于每个过程都有自己私有的栈空间和被调用者保护寄存器，使得过程调用都有自己私有的状态信息，所以递归调用也就和普通调用相同了。</p><p>这里也可以看出迭代和递归的区别，每次递归都需要在栈中申请空间，一旦写出了无限递归的代码，由于操作系统会规定栈的最大深度，就有可能发生栈溢出。而迭代如果没有进行空间分配，最有可能发生的就是无限循环。</p><h2 id="_2-数组" tabindex="-1"><a class="header-anchor" href="#_2-数组" aria-hidden="true">#</a> 2. 数组</h2><h3 id="_2-1-基本原则" tabindex="-1"><a class="header-anchor" href="#_2-1-基本原则" aria-hidden="true">#</a> 2.1 基本原则</h3>`,38),c=s("p",null,[a("对于数据类型T和整型常数N，有如下声明"),s("code",null,"T A[N]"),a("。它在内存中分配一个"),s("code",null,"L*N"),a("字节的连续地址，L是类型T的大小。其次A可以用来作为指向数组开头的指针，数组中元素i会被存放在地址为"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"x"),s("mi",null,"A")]),s("mo",null,"+"),s("mi",null,"L"),s("mo",null,"∗"),s("mi",null,"i")]),s("annotation",{encoding:"application/x-tex"},"x_{A}+L*i")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"x"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3283em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"A")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal"},"L"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∗"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6595em"}}),s("span",{class:"mord mathnormal"},"i")])])]),a("的地方。")],-1),o=n(`<p>在x86-64中，我们可以通过内存引用指令来简化数组访问，假设有以下声明：<code>int A[10]</code>，如果我们要计算<code>A[i]</code>，并且A的地址存放在寄存器%rax中，i存放在%rcx中，那么，可以使用以下指令：</p><div class="language-assembly line-numbers-mode" data-ext="assembly"><pre class="language-assembly"><code>movl (%rdx,%rcx,4) %eax
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>计算A[i]，并放置到寄存器%eax中，伸缩因子取到1，2，4，8。</p><h3 id="_2-2-指针和数组" tabindex="-1"><a class="header-anchor" href="#_2-2-指针和数组" aria-hidden="true">#</a> 2.2 指针和数组</h3><p>在语言中，如果对指针进行运算，它会根据指针引用的数据类型的大小进行伸缩，如果p是一个指定T数据类型的指针，p的值是x，那么，<code>p + i</code> 的值就是<code>x+L*i</code>，其中，L是T的大小。</p><p>假设有以下声明：<code>int A[10]</code>，数组名A可以看作数组的起始地址，也就是第一个元素的起始地址，它是不可改变的，根据实验得到下图：</p><p><img src="https://blog-zzys.oss-cn-beijing.aliyuncs.com/articles/arrayAdress.png" alt="" loading="lazy">、</p><blockquote><p>指针也可以指向函数：对于函数声明：int fun(int x, int *p);</p><p>声明一个指针： int (*p) (int, int *); 赋值：p = fun;</p><p>调用：int x = 1;p(x,&amp;x);</p></blockquote><h3 id="_2-3-多维数组" tabindex="-1"><a class="header-anchor" href="#_2-3-多维数组" aria-hidden="true">#</a> 2.3 多维数组</h3>`,9),d=s("p",null,[a("在c中，多维数组遵循行优先的原则，对于数组D，"),s("code",null,"D[i][j]"),a("的内存地址为："),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",{mathvariant:"normal"},"&"),s("mi",null,"D"),s("mo",{stretchy:"false"},"["),s("mi",null,"i"),s("mo",{stretchy:"false"},"]"),s("mo",{stretchy:"false"},"["),s("mi",null,"j"),s("mo",{stretchy:"false"},"]"),s("mo",null,"="),s("msub",null,[s("mi",null,"x"),s("mi",null,"d")]),s("mo",null,"+"),s("mi",null,"L"),s("mo",{stretchy:"false"},"("),s("mi",null,"C"),s("mo",null,"∗"),s("mi",null,"i"),s("mo",null,"+"),s("mi",null,"j"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"\\&D[i][j] = x_{d} + L(C *i +j)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"&"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"D"),s("span",{class:"mopen"},"["),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mclose"},"]"),s("span",{class:"mopen"},"["),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05724em"}},"j"),s("span",{class:"mclose"},"]"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"x"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3361em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"d")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"L"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∗"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7429em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05724em"}},"j"),s("span",{class:"mclose"},")")])])]),a("，其中L是数组元素的类型大小，"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"x"),s("mi",null,"d")])]),s("annotation",{encoding:"application/x-tex"},"x_{d}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.5806em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"x"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3361em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"d")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),a("是数组其实地址，C是列数。")],-1),r=n(`<h2 id="_3-异质的数据结构" tabindex="-1"><a class="header-anchor" href="#_3-异质的数据结构" aria-hidden="true">#</a> 3. 异质的数据结构</h2><p>c中提供了两种将不同的数据类型组合到一起创建数据类型的机制：结构（structure）和联合（union）。</p><h3 id="_3-1-结构" tabindex="-1"><a class="header-anchor" href="#_3-1-结构" aria-hidden="true">#</a> 3.1 结构</h3><p>c通过struct将不同类型的数据聚合到一个对象中，类似于数组的实现，结构的所有部分都存放在一段连续的内存中，指向结构的指针就是结构中第一个元素的第一个字节地址，通过每一个字段的字节偏移，来实现对结构元素的引用</p><h3 id="_3-2-联合" tabindex="-1"><a class="header-anchor" href="#_3-2-联合" aria-hidden="true">#</a> 3.2 联合</h3><p>联合提供了一种方式来规避c中的类型检查，允许多种类型来引用一个对象，它是用不同的字段来引用相同的内存块，也就是说，联合中的元素是互斥的。联合中的所有元素的起始地址相同，都是联合的起始地址，同时，联合的字节大小是所有元素中的最大的字节大小。</p><p>联合可以用来访问不同数据类型的为模式，考虑以下代码：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">doubule2bits</span><span class="token punctuation">(</span><span class="token keyword">double</span> d<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">union</span> <span class="token punctuation">{</span>
		<span class="token keyword">double</span> d<span class="token punctuation">;</span>
        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> u<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> temp<span class="token punctuation">;</span>
    temp<span class="token punctuation">.</span>d <span class="token operator">=</span> d<span class="token punctuation">;</span>
    <span class="token keyword">return</span> temp<span class="token punctuation">.</span>u<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此段代码可以用来获取double类型的位模式，利用了union的元素是互斥的，以及unsigned long类型的无符号64位特性。</p><h3 id="_3-3-数据对齐" tabindex="-1"><a class="header-anchor" href="#_3-3-数据对齐" aria-hidden="true">#</a> 3.3 数据对齐</h3><p>许多计算机系统会对数据类型的合法地址进行限制，要求其必须是某个值K的倍数（2，4，8），这种对齐限制简化处理器和硬件的设计成本，提升了cpu的效率。假设一个double类型的变量所处的地址不是8的倍数，那么低于总是从内存中取8个字节的处理器来说，就需要两次操作。K通常和数据类型的大小相同。</p><p>举例：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token keyword">char</span> c<span class="token punctuation">;</span>
    <span class="token keyword">int</span> j<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设结构体起始地址为0，那么i的起始地址为0，c的起始地址为4，j的起始地址为5，这种情况下是不满足对齐要求的，通常会在c后补上3个字节，使起始地址变为0，4，8，同时编译器会让起始地址满足4字节对齐。这样三个元素都满足四字节对齐。</p><p>有时还会向结构体末尾加入冗余字节，保证结构数组的每个都满足字节对齐要求。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">s</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token keyword">int</span> j<span class="token punctuation">;</span>
    <span class="token keyword">char</span> c<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果只考虑单个结构体，它已经满足了数据对齐的要求，但是考虑以下声明：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">s</span> d<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在后续的结构体中，不满足对齐要求，所以通常会在结构体的后面分配字节来满足要求。这个例子会在最后多分配3个字节。</p><h2 id="_4-缓冲区溢出" tabindex="-1"><a class="header-anchor" href="#_4-缓冲区溢出" aria-hidden="true">#</a> 4. 缓冲区溢出</h2><h3 id="_4-1-内存分配" tabindex="-1"><a class="header-anchor" href="#_4-1-内存分配" aria-hidden="true">#</a> 4.1 内存分配</h3><p>对于x86-64来说，我们可用的只有47位，高位由内核虚拟内存占用，下面是理论内存分配图：</p><p><img src="https://blog-zzys.oss-cn-beijing.aliyuncs.com/articles/memoryLayout.png" alt="" loading="lazy"></p><p>栈一般分配在内存的最高地址，向下增长，在ubuntu中，可以使用</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>unlimit <span class="token parameter variable">-s</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>来获取当前计算机的栈最大深度，一般都是8M。</p><p>shared libraries是程序需要的动态库，它会在程序运行时动态加载进来。我们可以看到，heap和stack相反，它是由低地址向高地址增长，它里面是由malloc等一系列内存分配函数所分配的空间。data里面存的是全局变量，text里面存的是执行代码。</p><h3 id="_4-2-缓冲区溢出" tabindex="-1"><a class="header-anchor" href="#_4-2-缓冲区溢出" aria-hidden="true">#</a> 4.2 缓冲区溢出</h3><p>我们知道，c不会对数组引用不做任何边界检查，并且局部变量和状态信息都存在栈中，这两种情况结合在一起就有可能导致一些非法的写操作修改栈中的状态信息，尤其是修改返回地址。</p><p>一种比较常见的状态破坏是<strong>缓冲区溢出</strong>（buffer overflow）。通常在栈中分配某个字符数组来保存一个字符串，但是字符串的长度超出了为数组分配的空间。</p><p>库函数gets就包含这个问题，它获取到了缓冲区的起始指针，却没有获取缓冲区的大小，在这样的情况下，输入超出缓冲区大小的字符串，就会修改到栈上的其他信息，如果存储的返回地址被修改了，那么就有可能跳转到一个其他的地方，有可能是攻击者设置的危险函数。</p><p>攻击者会输入给程序一串可执行代码的字节编码，同时还有另外的一些字节会用一个指向攻击代码的指针覆盖返回地址，那么返回指令的效果就是跳转到<strong>攻击代码</strong>。</p><h3 id="_4-3-对抗缓冲区溢出攻击" tabindex="-1"><a class="header-anchor" href="#_4-3-对抗缓冲区溢出攻击" aria-hidden="true">#</a> 4.3 对抗缓冲区溢出攻击</h3><p>首先是使用更加安全的库函数，例如使用fgets代替gets，这样能抵挡初级的攻击。</p><h4 id="_4-3-1-栈随机化" tabindex="-1"><a class="header-anchor" href="#_4-3-1-栈随机化" aria-hidden="true">#</a> 4.3.1 栈随机化</h4><p>在之前程序的栈地址很容易预测，对于同样的程序和操作系统版本的系统，攻击者如果可以确定一个机器所使用的栈空间，那么就可以在多个机器上实施攻击，这种现象称为<strong>安全单一化</strong>。</p><p>栈随机化的思想使得栈的位置在程序每次运行时都有一些变化，实现方式是：在程序开始时，在栈上分配一段随机大小的空间，但是大小要把控好，太大会浪费多余空间，太小不能获得足够多的栈地址变化。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token keyword">int</span> global <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">useless</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> local <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>pr <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;local data:%lx\\n&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;heap small data:%lx\\n&quot;</span><span class="token punctuation">,</span>pr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;global data:%lx\\n&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>global<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;code:%lx\\n&quot;</span><span class="token punctuation">,</span>useless<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行多次上面的代码，得到以下结果：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>local data:7fffccaabdc4
heap small data:56304ce902a0
global data:56304cb67010
code:56304cb64189

local data:7fffd2142a64
heap small data:55fb9fc2a2a0
global data:55fb9ed7d010
code:55fb9ed7a189
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>发现无论栈地址、代码地址、全局变量地址还是堆地址，都是在变化的。这被称为<strong>地址空间布局随机化</strong>，栈随机化是其中的一种</p><h4 id="_4-3-2-限制可执行代码区域" tabindex="-1"><a class="header-anchor" href="#_4-3-2-限制可执行代码区域" aria-hidden="true">#</a> 4.3.2 限制可执行代码区域</h4><p>一般，只有编译器产生的代码的那对内存才是需要可执行的，其他的部分可以被限制为读和写。所以系统会通过不同的方法将内存打上标记，以区分是否可执行。</p><h4 id="_4-3-3-栈破坏检测" tabindex="-1"><a class="header-anchor" href="#_4-3-3-栈破坏检测" aria-hidden="true">#</a> 4.3.3 栈破坏检测</h4><p>GCC中加入了一种叫做栈保护者的机制，它的思想是在缓冲区和局部状态之间加入一个<strong>金丝雀</strong>值，也称为哨兵值，每次程序运行随机产生的，在每次恢复寄存器状态和返回调用之前，程序检查金丝雀值是否改变，如果是，那么程序异常终止。</p><blockquote><p>可以在编译时加入 -fno-stack-protector 选项取消金丝雀值设置</p></blockquote><p>伪汇编如下：</p><div class="language-assembly line-numbers-mode" data-ext="assembly"><pre class="language-assembly"><code>echo:
  movq %fs:40,%rax
  movq	%rax, 8(%rsp)
  ...
  call gets
  ...
  xorq %fs:40,%rax
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>指令<code>%fs:40</code>指明金丝雀使用段寻址，将金丝雀放置一个特殊的段中，并标记为只读，这样就无法被覆盖，存入栈中。在恢复寄存器状态和返回调用之前，将栈上的值和金丝雀值相比较，如果不相等那么代表栈被破坏，程序终止。</p><h2 id="_5-浮点代码" tabindex="-1"><a class="header-anchor" href="#_5-浮点代码" aria-hidden="true">#</a> 5. 浮点代码</h2><p>这里的浮点指令基于AVX2，给定指令参数<code>-mavx2</code>，GCC会生成AVX2代码。本节只记录常用的命令，不去深究原理。</p><h3 id="_5-1-媒体寄存器" tabindex="-1"><a class="header-anchor" href="#_5-1-媒体寄存器" aria-hidden="true">#</a> 5.1 媒体寄存器</h3><p>AVX浮点结构允许数据存储在一组叫做AVX（高级向量扩展）的寄存器组中。</p><img src="https://blog-zzys.oss-cn-beijing.aliyuncs.com/articles/mideaRegister.jpg" style="zoom:25%;"><p>YMM是256位，32字节的，XMM是128位，16字节。对标量进行运算时，它只能存放浮点数只使用低64位或32位。</p><h3 id="_5-2-浮点传送操作" tabindex="-1"><a class="header-anchor" href="#_5-2-浮点传送操作" aria-hidden="true">#</a> 5.2 浮点传送操作</h3><p>浮点数的传送指令的操作数和通用寄存器相同，只是指令有所不同。</p><img src="https://blog-zzys.oss-cn-beijing.aliyuncs.com/articles/float.jpg" style="zoom:50%;"><h3 id="_5-3-浮点转换操作" tabindex="-1"><a class="header-anchor" href="#_5-3-浮点转换操作" aria-hidden="true">#</a> 5.3 浮点转换操作</h3><p>浮点数和整数之间的转换操作：</p><p><img src="https://blog-zzys.oss-cn-beijing.aliyuncs.com/articles/convert.jpg" alt="" loading="lazy"></p><p>三操作的浮点转化中的源2和目的通常是相同的，同时三操作的目的只能是XMM寄存器。</p><p>将float转换为double，通常使用以下指令：</p><p><img src="https://blog-zzys.oss-cn-beijing.aliyuncs.com/articles/float2double.jpg" alt="" loading="lazy"></p><p>vunpcklps指令将两个XMM寄存器的值交叉放置到第三个寄存器中，如俩个XMM寄存器的内容分别为：<code>[s3,s2,s1,s0]</code>和<code>[d3,d2,d1,d0]</code>，那么目的寄存器中的值就是<code>[s1,d1,s0,d0]</code>。在上面的代码中，三个操作数使用了同一个寄存器，如果源寄存器值为：<code>[x3,x2,x1,x0]</code>那么结果就是:<code>[x1,x1,x0,x0]</code>。vcvtpspd指令将源XMM寄存器中的两个底位单精度扩展称为XMM的俩个双精度值，得到<code>[dx0,dx0]</code>，最后得到将单精度x0转换为双精度dx0的两个副本。</p><p>将double转换为float，使用以下指令：</p><p><img src="https://blog-zzys.oss-cn-beijing.aliyuncs.com/articles/double2float.jpg" alt="" loading="lazy"></p><p>vmovddup将<code>[x1,x0]</code>转换为<code>[x0,x0]</code>。vcvtpdpsx指令将这两个值转换为单精度的值，放入目的寄存器的低64位中，同时将高64位设置为0。</p><h3 id="_5-4-过程中的浮点代码" tabindex="-1"><a class="header-anchor" href="#_5-4-过程中的浮点代码" aria-hidden="true">#</a> 5.4 过程中的浮点代码</h3><ul><li>XMM寄存器只可以传递最多8个浮点参数</li><li>函数通过%xmm0来返回浮点值</li><li>所有的XMM寄存器都是调用者保存的，被调用者可以随意覆盖。</li></ul><p>传递参数时，整数和浮点数使用的寄存器个数是分开来计算的。</p><h3 id="_5-5-浮点运算操作" tabindex="-1"><a class="header-anchor" href="#_5-5-浮点运算操作" aria-hidden="true">#</a> 5.5 浮点运算操作</h3><p>浮点运算有自己的一套指令：</p><img src="https://blog-zzys.oss-cn-beijing.aliyuncs.com/articles/floatCompute.jpg" style="zoom:50%;"><h3 id="_5-6-定义和使用浮点数" tabindex="-1"><a class="header-anchor" href="#_5-6-定义和使用浮点数" aria-hidden="true">#</a> 5.6 定义和使用浮点数</h3><p>和整数的运算操作不同，AVX浮点操作不能以立即数值作为操作数。编译器必须为所有的常量值分配和初始化存储空间，然后代码把这些值从内存中读入。下面是演示代码：</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>#include &lt;stdio.h&gt;

double cel2fahr(double t)
{
    return 1.8 * t + 32.0;
}
int main()
{
    cel2fahr();
    return 0;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-ass line-numbers-mode" data-ext="ass"><pre class="language-ass"><code>cel2fahr:
	mulsd	.LC0(%rip), %xmm0
	addsd	.LC1(%rip), %xmm0

.LC0:
	.long	3435973837
	.long	1073532108
	.align 8
.LC1:
	.long	0
	.long	1077936128
	.align 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数从.LC0中获取到两个值，由于机器是小端机器，所以第一个是低位。组合得到以下位模式：3ffccccccccccccd，转换后得到1.8。</p><h3 id="_5-7-在浮点代码中使用位级操作" tabindex="-1"><a class="header-anchor" href="#_5-7-在浮点代码中使用位级操作" aria-hidden="true">#</a> 5.7 在浮点代码中使用位级操作</h3><p>类似于通用寄存器：</p><img src="https://blog-zzys.oss-cn-beijing.aliyuncs.com/articles/floatBits.jpg" style="zoom:50%;"><h3 id="_5-8-浮点比较操作" tabindex="-1"><a class="header-anchor" href="#_5-8-浮点比较操作" aria-hidden="true">#</a> 5.8 浮点比较操作</h3><p>AVX2中提供了两条比较指令：</p><p><img src="https://blog-zzys.oss-cn-beijing.aliyuncs.com/articles/floatCompare.jpg" alt="" loading="lazy"></p><p>这些指令类似于CMP指令，但是S2必须位于XMM寄存器中，S1可以在内存或寄存器中。浮点比较指令会设置三个条件码：ZF、CF和PF（奇偶标志位）。当两个操作数有一个是NAN时，会设置该标志。在C中，有一个参数是NAN时，就认为比较失败了。</p><img src="https://blog-zzys.oss-cn-beijing.aliyuncs.com/articles/floatSet.jpg" style="zoom:67%;"><p>当任一参数是NAN时，就会出现无序的情况。</p>`,88),u=[p,c,o,d,r];function m(h,v){return l(),i("div",null,u)}const g=e(t,[["render",m],["__file","csapp-程序的机器级表示(2).html.vue"]]);export{g as default};
