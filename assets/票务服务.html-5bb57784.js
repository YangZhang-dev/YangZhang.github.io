import{_ as n,o as s,c as a,e as t}from"./app-20538318.js";const p={},c=t(`<p>票务服务是整个项目的核心，它承接着其他三个接口。其中最重要的就是余票查询和买票以及订单的取消。</p><h2 id="余票查询的特点" tabindex="-1"><a class="header-anchor" href="#余票查询的特点" aria-hidden="true">#</a> 余票查询的特点</h2><p>必须选择<strong>起始地点</strong>和<strong>到达地点</strong>（城市或站点），必须选择一个<strong>时间</strong>（天）</p><p>只有点击查询时，才会携带着起始地点、到达地点、日期发送请求进行查询。</p><p>而对于非必选条件，实际上是在前端进行筛选，因为我们知道，列车的数据量是不大的，每次都在后端筛选也不太好，十分占用性能，不如全部都发送给前端，由前端进行筛选。</p><p>实际上非必选条件也是根据返回的列车数据中存在的特征分类聚集的。</p><h2 id="余票查询" tabindex="-1"><a class="header-anchor" href="#余票查询" aria-hidden="true">#</a> 余票查询</h2><p>首先要经过一条责任链，我们先对其进行讲解。</p><p>首先是参数的校验：参数不能为空、参数的合法：起始时间不能晚于到达时间，出发地和目的地不能相同。</p><p>然后是判断出发地和目的地是否存在，其中我们需要访问redis中的一个Hash结构，里面存放了所有的城市和站点。如下：</p><p><img src="https://blog-zzys.oss-cn-beijing.aliyuncs.com/articles/e1e4aff8dced7ba00e89dc9ddd003099.png" alt="" loading="lazy"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 数据加载标识</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> <span class="token constant">CACHE_DATA_ISNULL_AND_LOAD_FLAG</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token class-name">TicketPageQueryReqDTO</span> requestParam<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">StringRedisTemplate</span> stringRedisTemplate <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">StringRedisTemplate</span><span class="token punctuation">)</span> distributedCache<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">HashOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> hashOperations <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//  从redis中拿到所有的起始和终点</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> actualExistList <span class="token operator">=</span> hashOperations<span class="token punctuation">.</span><span class="token function">multiGet</span><span class="token punctuation">(</span>
                <span class="token constant">QUERY_ALL_REGION_LIST</span><span class="token punctuation">,</span>
                <span class="token class-name">ListUtil</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span>requestParam<span class="token punctuation">.</span><span class="token function">getFromStation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> requestParam<span class="token punctuation">.</span><span class="token function">getToStation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> emptyCount <span class="token operator">=</span> actualExistList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token operator">::</span><span class="token function">isNull</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果两个都存在，直接返回</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>emptyCount <span class="token operator">==</span> <span class="token number">0L</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 如果只有一个不存在或者</span>
        <span class="token comment">// 有两个不存在并且缓存数据已经被加载过并且key存在</span>
        <span class="token comment">//  说明站点不存在</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>emptyCount <span class="token operator">==</span> <span class="token number">1L</span> <span class="token operator">||</span> <span class="token punctuation">(</span>emptyCount <span class="token operator">==</span> <span class="token number">2L</span> <span class="token operator">&amp;&amp;</span> <span class="token constant">CACHE_DATA_ISNULL_AND_LOAD_FLAG</span> <span class="token operator">&amp;&amp;</span> distributedCache<span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span><span class="token constant">QUERY_ALL_REGION_LIST</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClientException</span><span class="token punctuation">(</span><span class="token string">&quot;出发地或目的地不存在&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 如果说新增了站点，则需要将redis中的QUERY_ALL_REGION_LIST删除</span>
        
        <span class="token comment">// 如果有两个不存在并且(缓存数据已经被加载过或key存在)</span>
        <span class="token class-name">RLock</span> lock <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span><span class="token constant">LOCK_QUERY_ALL_REGION_LIST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 双重判定锁去加载数据</span>
        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>distributedCache<span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span><span class="token constant">QUERY_ALL_REGION_LIST</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                actualExistList <span class="token operator">=</span> hashOperations<span class="token punctuation">.</span><span class="token function">multiGet</span><span class="token punctuation">(</span>
                        <span class="token constant">QUERY_ALL_REGION_LIST</span><span class="token punctuation">,</span>
                        <span class="token class-name">ListUtil</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span>requestParam<span class="token punctuation">.</span><span class="token function">getFromStation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> requestParam<span class="token punctuation">.</span><span class="token function">getToStation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">)</span><span class="token punctuation">;</span>
                emptyCount <span class="token operator">=</span> actualExistList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token operator">::</span><span class="token function">nonNull</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>emptyCount <span class="token operator">!=</span> <span class="token number">2L</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClientException</span><span class="token punctuation">(</span><span class="token string">&quot;出发地或目的地不存在&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RegionDO</span><span class="token punctuation">&gt;</span></span> regionDOList <span class="token operator">=</span> regionMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token class-name">Wrappers</span><span class="token punctuation">.</span><span class="token function">emptyWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StationDO</span><span class="token punctuation">&gt;</span></span> stationDOList <span class="token operator">=</span> stationMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token class-name">Wrappers</span><span class="token punctuation">.</span><span class="token function">emptyWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> regionValueMap <span class="token operator">=</span> <span class="token class-name">Maps</span><span class="token punctuation">.</span><span class="token function">newHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">RegionDO</span> each <span class="token operator">:</span> regionDOList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                regionValueMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>each<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> each<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">StationDO</span> each <span class="token operator">:</span> stationDOList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                regionValueMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>each<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> each<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            hashOperations<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span><span class="token constant">QUERY_ALL_REGION_LIST</span><span class="token punctuation">,</span> regionValueMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token constant">CACHE_DATA_ISNULL_AND_LOAD_FLAG</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token comment">// 从数据库中的数据进行判断</span>
            emptyCount <span class="token operator">=</span> regionValueMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>each <span class="token operator">-&gt;</span> <span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">equalsAny</span><span class="token punctuation">(</span>each<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> requestParam<span class="token punctuation">.</span><span class="token function">getFromStation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> requestParam<span class="token punctuation">.</span><span class="token function">getToStation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>emptyCount <span class="token operator">!=</span> <span class="token number">2L</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClientException</span><span class="token punctuation">(</span><span class="token string">&quot;出发地或目的地不存在&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着就是具体的查询业务逻辑。</p><p>如上文所诉，我们的查询参数最主要的就是起始地点，到达地点，以及时间（北京，杭州东）。</p><ol><li><p>由于传过来的是站点或城市的Code，所以我们首先通过redis将code转换为中文名称，注意code可能是城市也可能是站点，但最终都要<strong>映射</strong>到城市的中文名称。为了防止缓存穿透，采用分布式锁和双重判定锁来进行第一次加载。</p><p><img src="https://blog-zzys.oss-cn-beijing.aliyuncs.com/articles/2f6ae54ea3a4fe8bf3495e307e867bec.png" alt="" loading="lazy"></p></li><li><p>然后获取所有在这两个地点之间的车次<strong>详细信息</strong>，从redis中获取，同样使用分布式锁和双重判定锁防止缓存穿透。</p><p><img src="https://blog-zzys.oss-cn-beijing.aliyuncs.com/articles/b32d3021bbd8935622b3e19eb4c4ac07.png" alt="" loading="lazy"></p></li><li><p>对每一个车次，根据列车id，起始站点，到达站点获取座位价格信息（是一个List，因为一个列车由很多类型的座位）</p><p><img src="https://blog-zzys.oss-cn-beijing.aliyuncs.com/articles/91e9e6d777b0e40ede7ae04ca0196857.png" alt="" loading="lazy"></p></li><li><p>由上一步骤，对于每个座位，计算其余票情况，redis是hash，hashKey是列车id，起始站点，到达站点。k是座位类型，v是数量。如果数量是空则要调用seatMarginCacheLoader组件从数据库中进行加载计算。</p><p><img src="https://blog-zzys.oss-cn-beijing.aliyuncs.com/articles/32ece7cfea092096f407e768ac68b771.png" alt="" loading="lazy"></p></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">TicketPageQueryRespDTO</span> <span class="token function">pageListTicketQueryV1</span><span class="token punctuation">(</span><span class="token class-name">TicketPageQueryReqDTO</span> requestParam<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 责任链模式 验证城市名称是否存在、不存在加载缓存以及出发日期不能小于当前日期等等</span>
    ticketPageQueryAbstractChainContext<span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token class-name">TicketChainMarkEnum</span><span class="token punctuation">.</span><span class="token constant">TRAIN_QUERY_FILTER</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> requestParam<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">StringRedisTemplate</span> stringRedisTemplate <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">StringRedisTemplate</span><span class="token punctuation">)</span> distributedCache<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 1. </span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> stationDetails <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">multiGet</span><span class="token punctuation">(</span><span class="token constant">REGION_TRAIN_STATION_MAPPING</span><span class="token punctuation">,</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span>requestParam<span class="token punctuation">.</span><span class="token function">getFromStation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> requestParam<span class="token punctuation">.</span><span class="token function">getToStation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> count <span class="token operator">=</span> stationDetails<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token operator">::</span><span class="token function">isNull</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">RLock</span> lock <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span><span class="token constant">LOCK_REGION_TRAIN_STATION_MAPPING</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            stationDetails <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">multiGet</span><span class="token punctuation">(</span><span class="token constant">REGION_TRAIN_STATION_MAPPING</span><span class="token punctuation">,</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span>requestParam<span class="token punctuation">.</span><span class="token function">getFromStation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> requestParam<span class="token punctuation">.</span><span class="token function">getToStation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            count <span class="token operator">=</span> stationDetails<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token operator">::</span><span class="token function">isNull</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> regionTrainStationMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                stationMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token class-name">Wrappers</span><span class="token punctuation">.</span><span class="token function">emptyWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>each <span class="token operator">-&gt;</span> regionTrainStationMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>each<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> each<span class="token punctuation">.</span><span class="token function">getRegionName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span><span class="token constant">REGION_TRAIN_STATION_MAPPING</span><span class="token punctuation">,</span> regionTrainStationMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
                stationDetails <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                stationDetails<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>regionTrainStationMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>requestParam<span class="token punctuation">.</span><span class="token function">getFromStation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                stationDetails<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>regionTrainStationMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>requestParam<span class="token punctuation">.</span><span class="token function">getToStation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 2. </span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TicketListDTO</span><span class="token punctuation">&gt;</span></span> seatResults <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> buildRegionTrainStationHashKey <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token constant">REGION_TRAIN_STATION</span><span class="token punctuation">,</span> stationDetails<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stationDetails<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> regionTrainStationAllMap <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>buildRegionTrainStationHashKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">MapUtil</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>regionTrainStationAllMap<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">RLock</span> lock <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span><span class="token constant">LOCK_REGION_TRAIN_STATION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            regionTrainStationAllMap <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>buildRegionTrainStationHashKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">MapUtil</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>regionTrainStationAllMap<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TrainStationRelationDO</span><span class="token punctuation">&gt;</span></span> trainStationRelationList <span class="token operator">=</span> trainStationRelationMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TrainStationRelationDO</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                                                                                              <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">TrainStationRelationDO</span><span class="token operator">::</span><span class="token function">getStartRegion</span><span class="token punctuation">,</span> stationDetails<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                                                                                                              <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">TrainStationRelationDO</span><span class="token operator">::</span><span class="token function">getEndRegion</span><span class="token punctuation">,</span> stationDetails<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">TrainStationRelationDO</span> each <span class="token operator">:</span> trainStationRelationList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">TrainDO</span> trainDO <span class="token operator">=</span> distributedCache<span class="token punctuation">.</span><span class="token function">safeGet</span><span class="token punctuation">(</span>
                        <span class="token constant">TRAIN_INFO</span> <span class="token operator">+</span> each<span class="token punctuation">.</span><span class="token function">getTrainId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        <span class="token class-name">TrainDO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
                        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> trainMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>each<span class="token punctuation">.</span><span class="token function">getTrainId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        <span class="token constant">ADVANCE_TICKET_DAY</span><span class="token punctuation">,</span>
                        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">DAYS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">TicketListDTO</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TicketListDTO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    result<span class="token punctuation">.</span><span class="token function">setTrainId</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>trainDO<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    result<span class="token punctuation">.</span><span class="token function">setTrainNumber</span><span class="token punctuation">(</span>trainDO<span class="token punctuation">.</span><span class="token function">getTrainNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    result<span class="token punctuation">.</span><span class="token function">setDepartureTime</span><span class="token punctuation">(</span><span class="token function">convertDateToLocalTime</span><span class="token punctuation">(</span>each<span class="token punctuation">.</span><span class="token function">getDepartureTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;HH:mm&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    result<span class="token punctuation">.</span><span class="token function">setArrivalTime</span><span class="token punctuation">(</span><span class="token function">convertDateToLocalTime</span><span class="token punctuation">(</span>each<span class="token punctuation">.</span><span class="token function">getArrivalTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;HH:mm&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    result<span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token class-name">DateUtil</span><span class="token punctuation">.</span><span class="token function">calculateHourDifference</span><span class="token punctuation">(</span>each<span class="token punctuation">.</span><span class="token function">getDepartureTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> each<span class="token punctuation">.</span><span class="token function">getArrivalTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    result<span class="token punctuation">.</span><span class="token function">setDeparture</span><span class="token punctuation">(</span>each<span class="token punctuation">.</span><span class="token function">getDeparture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    result<span class="token punctuation">.</span><span class="token function">setArrival</span><span class="token punctuation">(</span>each<span class="token punctuation">.</span><span class="token function">getArrival</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    result<span class="token punctuation">.</span><span class="token function">setDepartureFlag</span><span class="token punctuation">(</span>each<span class="token punctuation">.</span><span class="token function">getDepartureFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    result<span class="token punctuation">.</span><span class="token function">setArrivalFlag</span><span class="token punctuation">(</span>each<span class="token punctuation">.</span><span class="token function">getArrivalFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    result<span class="token punctuation">.</span><span class="token function">setTrainType</span><span class="token punctuation">(</span>trainDO<span class="token punctuation">.</span><span class="token function">getTrainType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    result<span class="token punctuation">.</span><span class="token function">setTrainBrand</span><span class="token punctuation">(</span>trainDO<span class="token punctuation">.</span><span class="token function">getTrainBrand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>trainDO<span class="token punctuation">.</span><span class="token function">getTrainTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        result<span class="token punctuation">.</span><span class="token function">setTrainTags</span><span class="token punctuation">(</span><span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>trainDO<span class="token punctuation">.</span><span class="token function">getTrainTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">long</span> betweenDay <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>date<span class="token punctuation">.</span></span>DateUtil</span><span class="token punctuation">.</span><span class="token function">betweenDay</span><span class="token punctuation">(</span>each<span class="token punctuation">.</span><span class="token function">getDepartureTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> each<span class="token punctuation">.</span><span class="token function">getArrivalTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    result<span class="token punctuation">.</span><span class="token function">setDaysArrived</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> betweenDay<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    result<span class="token punctuation">.</span><span class="token function">setSaleStatus</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>trainDO<span class="token punctuation">.</span><span class="token function">getSaleTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    result<span class="token punctuation">.</span><span class="token function">setSaleTime</span><span class="token punctuation">(</span><span class="token function">convertDateToLocalTime</span><span class="token punctuation">(</span>trainDO<span class="token punctuation">.</span><span class="token function">getSaleTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;MM-dd HH:mm&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    seatResults<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    regionTrainStationAllMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">CacheUtil</span><span class="token punctuation">.</span><span class="token function">buildKey</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>each<span class="token punctuation">.</span><span class="token function">getTrainId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> each<span class="token punctuation">.</span><span class="token function">getDeparture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> each<span class="token punctuation">.</span><span class="token function">getArrival</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>buildRegionTrainStationHashKey<span class="token punctuation">,</span> regionTrainStationAllMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    seatResults <span class="token operator">=</span> <span class="token class-name">CollUtil</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>seatResults<span class="token punctuation">)</span>
        <span class="token operator">?</span> regionTrainStationAllMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>each <span class="token operator">-&gt;</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>each<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">TicketListDTO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token operator">:</span> seatResults<span class="token punctuation">;</span>
    seatResults <span class="token operator">=</span> seatResults<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TimeStringComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">TicketListDTO</span> each <span class="token operator">:</span> seatResults<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 3. </span>
        <span class="token comment">// 获取指定列车、出发站点、到达站点的所有类型座位的价格</span>
        <span class="token class-name">String</span> trainStationPriceStr <span class="token operator">=</span> distributedCache<span class="token punctuation">.</span><span class="token function">safeGet</span><span class="token punctuation">(</span>
            <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token constant">TRAIN_STATION_PRICE</span><span class="token punctuation">,</span> each<span class="token punctuation">.</span><span class="token function">getTrainId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> each<span class="token punctuation">.</span><span class="token function">getDeparture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> each<span class="token punctuation">.</span><span class="token function">getArrival</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TrainStationPriceDO</span><span class="token punctuation">&gt;</span></span> trainStationPriceQueryWrapper <span class="token operator">=</span> <span class="token class-name">Wrappers</span><span class="token punctuation">.</span><span class="token function">lambdaQuery</span><span class="token punctuation">(</span><span class="token class-name">TrainStationPriceDO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">TrainStationPriceDO</span><span class="token operator">::</span><span class="token function">getDeparture</span><span class="token punctuation">,</span> each<span class="token punctuation">.</span><span class="token function">getDeparture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">TrainStationPriceDO</span><span class="token operator">::</span><span class="token function">getArrival</span><span class="token punctuation">,</span> each<span class="token punctuation">.</span><span class="token function">getArrival</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">TrainStationPriceDO</span><span class="token operator">::</span><span class="token function">getTrainId</span><span class="token punctuation">,</span> each<span class="token punctuation">.</span><span class="token function">getTrainId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>trainStationPriceMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>trainStationPriceQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token constant">ADVANCE_TICKET_DAY</span><span class="token punctuation">,</span>
            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">DAYS</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TrainStationPriceDO</span><span class="token punctuation">&gt;</span></span> trainStationPriceDOList <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseArray</span><span class="token punctuation">(</span>trainStationPriceStr<span class="token punctuation">,</span> <span class="token class-name">TrainStationPriceDO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SeatClassDTO</span><span class="token punctuation">&gt;</span></span> seatClassList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 4. </span>
        trainStationPriceDOList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> seatType <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getSeatType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> keySuffix <span class="token operator">=</span> <span class="token class-name">CacheUtil</span><span class="token punctuation">.</span><span class="token function">buildKey</span><span class="token punctuation">(</span>each<span class="token punctuation">.</span><span class="token function">getTrainId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span><span class="token function">getDeparture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span><span class="token function">getArrival</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Object</span> quantityObj <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">TRAIN_STATION_REMAINING_TICKET</span> <span class="token operator">+</span> keySuffix<span class="token punctuation">,</span> seatType<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> quantity <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>quantityObj<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token operator">::</span><span class="token function">toString</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">parseInt</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">orElseGet</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> seatMarginMap <span class="token operator">=</span> seatMarginCacheLoader<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>each<span class="token punctuation">.</span><span class="token function">getTrainId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> seatType<span class="token punctuation">,</span> item<span class="token punctuation">.</span><span class="token function">getDeparture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span><span class="token function">getArrival</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>seatMarginMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getSeatType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">parseInt</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            seatClassList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SeatClassDTO</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getSeatType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> quantity<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">&quot;100&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">RoundingMode</span><span class="token punctuation">.</span><span class="token constant">HALF_UP</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        each<span class="token punctuation">.</span><span class="token function">setSeatClassList</span><span class="token punctuation">(</span>seatClassList<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token class-name">TicketPageQueryRespDTO</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">trainList</span><span class="token punctuation">(</span>seatResults<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">departureStationList</span><span class="token punctuation">(</span><span class="token function">buildDepartureStationList</span><span class="token punctuation">(</span>seatResults<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">arrivalStationList</span><span class="token punctuation">(</span><span class="token function">buildArrivalStationList</span><span class="token punctuation">(</span>seatResults<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">trainBrandList</span><span class="token punctuation">(</span><span class="token function">buildTrainBrandList</span><span class="token punctuation">(</span>seatResults<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">seatClassTypeList</span><span class="token punctuation">(</span><span class="token function">buildSeatClassList</span><span class="token punctuation">(</span>seatResults<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="购票的特点" tabindex="-1"><a class="header-anchor" href="#购票的特点" aria-hidden="true">#</a> 购票的特点</h2><p>购票相对于其他的购物还是有不同的，主要特点如下：</p><p>首先可以支持一个用户为其他尚未注册的乘车人购票，一个订单中会存在多个子订单。</p><p>其次是在这一个订单中，所有的子订单除了<strong>座位类型</strong>和<strong>车厢</strong>有可能不同外（实际上在项目中，一个车厢中的座位类型都是相同的，可以根据车厢判断座位类型），其余的应该都相同（同一天，同一趟列车，同一起点和终点）。</p><p>购票实际上分为两部分，提交订单和付款。提交订单10分钟如果没有付款，订单会自动关闭。在这十分钟内，该座位是处于锁定状态（对查询来说是已售出，如果订单关闭就会将状态改回未售出状态）</p><h2 id="购票策略" tabindex="-1"><a class="header-anchor" href="#购票策略" aria-hidden="true">#</a> 购票策略</h2><p>购票是存在一定的策略的，我们知道12306存在选座服务，如果可以，12306会优先帮助我们选择我们指定的座位，但是如果不满足就会<strong>自动分配</strong>席位。下面就讲解一下在项目中的自动分配策略。</p><p>订单中可以包含不同座位类型的子订单，我们下面的自动分配策略就针对一种座位类型来讲解，如果存在多种座位类型也是类似的。</p><p><img src="https://blog-zzys.oss-cn-beijing.aliyuncs.com/articles/fb8bee46b6aaf351341275251f99500f.png" alt="image-20231218122003303" loading="lazy"></p><p>对于多人购票，我们查找的条件是：相邻座位，相同车厢。如果无法满足相邻座位，则设法满足相同车厢，如果无法满足相同车厢，那么就随机分配。</p><h2 id="购票" tabindex="-1"><a class="header-anchor" href="#购票" aria-hidden="true">#</a> 购票</h2><p>购票存在两个接口，V2对V1的<strong>互斥逻辑</strong>进行了优化，减小了锁粒度，增加了令牌桶，增大了并发量，隔绝了大部分无效请求。但是实际的购票流程是相同的。</p><h3 id="controller" tabindex="-1"><a class="header-anchor" href="#controller" aria-hidden="true">#</a> Controller</h3><p>在Controller层存在幂等检查，具体使用如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ILog</span>
<span class="token annotation punctuation">@Idempotent</span><span class="token punctuation">(</span>
        uniqueKeyPrefix <span class="token operator">=</span> <span class="token string">&quot;railway-ticket:lock_purchase-tickets:&quot;</span><span class="token punctuation">,</span>
        key <span class="token operator">=</span> <span class="token string">&quot;T(com.zzys.railway.framework.starter.user.core.UserContext).getUsername()&quot;</span><span class="token punctuation">,</span>
        message <span class="token operator">=</span> <span class="token string">&quot;正在执行下单流程，请稍后...&quot;</span><span class="token punctuation">,</span>
        scene <span class="token operator">=</span> <span class="token class-name">IdempotentSceneEnum</span><span class="token punctuation">.</span><span class="token constant">RESTAPI</span><span class="token punctuation">,</span>
        type <span class="token operator">=</span> <span class="token class-name">IdempotentTypeEnum</span><span class="token punctuation">.</span><span class="token constant">SPEL</span>
<span class="token punctuation">)</span>
<span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/api/ticket-service/ticket/purchase&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TicketPurchaseRespDTO</span><span class="token punctuation">&gt;</span></span> <span class="token function">purchaseTickets</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">PurchaseTicketReqDTO</span> requestParam<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Results</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>ticketService<span class="token punctuation">.</span><span class="token function">purchaseTicketsV1</span><span class="token punctuation">(</span>requestParam<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在这里使用的是幂等组件库中的基于SPEL的REST场景下的幂等处理，本质上是以用户名为标识加上分布式锁，防止重复购票。</p><h3 id="责任链" tabindex="-1"><a class="header-anchor" href="#责任链" aria-hidden="true">#</a> 责任链</h3><p>V1和V2都会通过一条责任链：</p><p>首先是参数的判空校验，正确性校验（列车是否存在，购票时间是否正确，车站是否存在车次中，以及车站的顺序是否正确）。</p><p>然后就是判断余票是否充足，如果用户提交多个乘车人非同一座位类型，拆分验证。一个订单中的子订单只有座位类型可能不同，其他都相同。</p><p>假设下面是一个订单，那么每个子项都是一个子订单</p><ul><li>列车1-北京南-南京南-车厢1-商务座-座位1</li><li>列车1-北京南-南京南-车厢1-商务座-座位2</li><li>列车1-北京南-南京南-车厢2-二等座-座位1</li></ul><p>上面的情况就会查询以下的Redis缓存，hash的key是：列车1-北京南-南京南</p><ul><li>商务座：2</li><li>二等座：1</li></ul><h3 id="v1" tabindex="-1"><a class="header-anchor" href="#v1" aria-hidden="true">#</a> V1</h3><p>V1很暴力，每当一个订单在创建时，我们就对整个列车加分布式锁，也就是说，每辆列车同时只能有一个人选座。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">TicketPurchaseRespDTO</span> <span class="token function">purchaseTicketsV1</span><span class="token punctuation">(</span><span class="token class-name">PurchaseTicketReqDTO</span> requestParam<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 责任链模式，验证 1：参数必填 2：参数正确性 3：乘客是否已买当前车次等...</span>
    purchaseTicketAbstractChainContext<span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token class-name">TicketChainMarkEnum</span><span class="token punctuation">.</span><span class="token constant">TRAIN_PURCHASE_TICKET_FILTER</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> requestParam<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> lockKey <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token constant">LOCK_PURCHASE_TICKETS</span><span class="token punctuation">,</span> requestParam<span class="token punctuation">.</span><span class="token function">getTrainId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">RLock</span> lock <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> ticketService<span class="token punctuation">.</span><span class="token function">executePurchaseTickets</span><span class="token punctuation">(</span>requestParam<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="v2" tabindex="-1"><a class="header-anchor" href="#v2" aria-hidden="true">#</a> V2</h3><h4 id="锁粒度的改变" tabindex="-1"><a class="header-anchor" href="#锁粒度的改变" aria-hidden="true">#</a> 锁粒度的改变</h4><p>如果有一人选择的是二等座，另一个人选择同一辆车的商务座，我们发现其实这两个请求是可以并发执行的。所以说，我们不应该对整个列车加锁，而是对座位类型加锁。</p><p>这里又引出了死锁的问题，我们破坏环路等待条件，在加锁时，都按照座位类型按序获取（0-商务座，1-一等座，2-二等座）。这样可以避免死锁。</p><h4 id="令牌桶" tabindex="-1"><a class="header-anchor" href="#令牌桶" aria-hidden="true">#</a> 令牌桶</h4><p>我们可以发现，假设train1-北京南-南京南-二等座一共就只有2张票，但是在V1版本下，100个请求过来买这类票，我们仍然需要对当前列车获取100次分布式锁，其实其中的98次分布式锁的获取是不必须的。我们可以利用限流算法，对无效请求进行隔离。</p><p>在这里我们使用的是类似令牌桶的算法，但是我们的令牌是不会增加的，每天会刷新令牌桶中的余票。</p><p>令牌桶实际上是Redis中的Hash结构，每一趟列车都是一个Hash。在其中包含着这一条路线中的所有逻辑路线和座位类型的笛卡尔积的余票数量。</p><p>我们使用lua脚本对每次取出一个逻辑线路的指定座位类型的影响进行改变，比较绕，举个例子：</p><p>假设我们买了列车2的从南京南到杭州东的商务座，原始bucket如下所示：</p><p><img src="https://blog-zzys.oss-cn-beijing.aliyuncs.com/articles/9b134b4f5d766afc2ad50779ff8bc41d.png" alt="" loading="lazy"></p><p>那么之后我们不仅要对<code>南京南_杭州东_0</code>的余票减一，对<code>南京南_上海虹桥_0</code>的余票也要减一，我们使用lua脚本保证执行的原子性。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">takeTokenFromBucket</span><span class="token punctuation">(</span><span class="token class-name">PurchaseTicketReqDTO</span> requestParam<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 前面这一部分主要是对令牌桶的获取</span>
    <span class="token comment">// 以及当令牌桶不存在时，采用分布式双重判定锁初始化的步骤</span>
    <span class="token class-name">TrainDO</span> trainDO <span class="token operator">=</span> distributedCache<span class="token punctuation">.</span><span class="token function">safeGet</span><span class="token punctuation">(</span>
            <span class="token constant">TRAIN_INFO</span> <span class="token operator">+</span> requestParam<span class="token punctuation">.</span><span class="token function">getTrainId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">TrainDO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> trainMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>requestParam<span class="token punctuation">.</span><span class="token function">getTrainId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token constant">ADVANCE_TICKET_DAY</span><span class="token punctuation">,</span>
            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">DAYS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RouteDTO</span><span class="token punctuation">&gt;</span></span> routeDTOList <span class="token operator">=</span> trainStationService
            <span class="token punctuation">.</span><span class="token function">listTrainStationRoute</span><span class="token punctuation">(</span>requestParam<span class="token punctuation">.</span><span class="token function">getTrainId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> trainDO<span class="token punctuation">.</span><span class="token function">getStartStation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> trainDO<span class="token punctuation">.</span><span class="token function">getEndStation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">StringRedisTemplate</span> stringRedisTemplate <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">StringRedisTemplate</span><span class="token punctuation">)</span> distributedCache<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> actualHashKey <span class="token operator">=</span> <span class="token constant">TICKET_AVAILABILITY_TOKEN_BUCKET</span> <span class="token operator">+</span> requestParam<span class="token punctuation">.</span><span class="token function">getTrainId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Boolean</span> hasKey <span class="token operator">=</span> distributedCache<span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>actualHashKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hasKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">RLock</span> lock <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token constant">LOCK_TICKET_AVAILABILITY_TOKEN_BUCKET</span><span class="token punctuation">,</span> requestParam<span class="token punctuation">.</span><span class="token function">getTrainId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Boolean</span> hasKeyTwo <span class="token operator">=</span> distributedCache<span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>actualHashKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hasKeyTwo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> seatTypes <span class="token operator">=</span> <span class="token class-name">VehicleTypeEnum</span><span class="token punctuation">.</span><span class="token function">findSeatTypesByCode</span><span class="token punctuation">(</span>trainDO<span class="token punctuation">.</span><span class="token function">getTrainType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> ticketAvailabilityTokenMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">RouteDTO</span> each <span class="token operator">:</span> routeDTOList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SeatTypeCountDTO</span><span class="token punctuation">&gt;</span></span> seatTypeCountDTOList <span class="token operator">=</span> seatMapper<span class="token punctuation">.</span><span class="token function">listSeatTypeCount</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>requestParam<span class="token punctuation">.</span><span class="token function">getTrainId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> each<span class="token punctuation">.</span><span class="token function">getStartStation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> each<span class="token punctuation">.</span><span class="token function">getEndStation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> seatTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SeatTypeCountDTO</span> eachSeatTypeCountDTO <span class="token operator">:</span> seatTypeCountDTOList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token class-name">String</span> buildCacheKey <span class="token operator">=</span> <span class="token class-name">CacheUtil</span><span class="token punctuation">.</span><span class="token function">buildKey</span><span class="token punctuation">(</span>each<span class="token punctuation">.</span><span class="token function">getStartStation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> each<span class="token punctuation">.</span><span class="token function">getEndStation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>eachSeatTypeCountDTO<span class="token punctuation">.</span><span class="token function">getSeatType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        ticketAvailabilityTokenMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>buildCacheKey<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>eachSeatTypeCountDTO<span class="token punctuation">.</span><span class="token function">getSeatCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span><span class="token constant">TICKET_AVAILABILITY_TOKEN_BUCKET</span> <span class="token operator">+</span> requestParam<span class="token punctuation">.</span><span class="token function">getTrainId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ticketAvailabilityTokenMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 获取lua脚本</span>
    <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> actual <span class="token operator">=</span> <span class="token function">getLuaScript</span><span class="token punctuation">(</span><span class="token constant">LUA_TICKET_AVAILABILITY_TOKEN_BUCKET_PATH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// [座位类型: 座位数量] [{0:1},{1:2}]</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> seatTypeCountMap <span class="token operator">=</span> requestParam<span class="token punctuation">.</span><span class="token function">getPassengers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">PurchaseTicketPassengerDetailDTO</span><span class="token operator">::</span><span class="token function">getSeatType</span><span class="token punctuation">,</span> <span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">counting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 将其转换为JSONArray形式</span>
    <span class="token class-name">JSONArray</span> seatTypeCountArray <span class="token operator">=</span> <span class="token class-name">Map2JSONArray</span><span class="token punctuation">(</span>seatTypeCountMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取到起始站到终点站所经过的所有逻辑路线</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RouteDTO</span><span class="token punctuation">&gt;</span></span> takeoutRouteDTOList <span class="token operator">=</span> trainStationService
            <span class="token punctuation">.</span><span class="token function">listTrainStationRoute</span><span class="token punctuation">(</span>requestParam<span class="token punctuation">.</span><span class="token function">getTrainId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> requestParam<span class="token punctuation">.</span><span class="token function">getDeparture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> requestParam<span class="token punctuation">.</span><span class="token function">getArrival</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> luaScriptKey <span class="token operator">=</span> <span class="token class-name">CacheUtil</span><span class="token punctuation">.</span><span class="token function">buildKey</span><span class="token punctuation">(</span>requestParam<span class="token punctuation">.</span><span class="token function">getDeparture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> requestParam<span class="token punctuation">.</span><span class="token function">getArrival</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 调用lua脚本 KEY：令牌桶id，HashKey的前缀（北京南_南京南） ARGV: 座位数量集合，沿途逻辑路线</span>
    <span class="token class-name">Long</span> result <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>actual<span class="token punctuation">,</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span>actualHashKey<span class="token punctuation">,</span> luaScriptKey<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>seatTypeCountArray<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>takeoutRouteDTOList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 成功返回0</span>
    <span class="token keyword">return</span> result <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是lua脚本逻辑，注释写的很详细。</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- Lua脚本，用于检查和更新票务系统中的座位可用性</span>

<span class="token comment">-- 从Redis命令参数（KEYS数组）中提取第二个键 北京南_南京南</span>
<span class="token keyword">local</span> inputString <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>

<span class="token comment">-- 初始化处理键的变量</span>
<span class="token keyword">local</span> actualKey <span class="token operator">=</span> inputString
<span class="token keyword">local</span> colonIndex <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>actualKey<span class="token punctuation">,</span> <span class="token string">&quot;:&quot;</span><span class="token punctuation">)</span>

<span class="token comment">-- 检查键是否包含冒号，如果是，则提取冒号后的子串</span>
<span class="token keyword">if</span> colonIndex <span class="token operator">~=</span> <span class="token keyword">nil</span> <span class="token keyword">then</span>
    actualKey <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span>actualKey<span class="token punctuation">,</span> colonIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>

<span class="token comment">-- 解码作为第一个参数传递的JSON数组（ARGV数组） [0(商务座):1(数量),1:2]</span>
<span class="token keyword">local</span> jsonArrayStr <span class="token operator">=</span> ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token keyword">local</span> jsonArray <span class="token operator">=</span> cjson<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>jsonArrayStr<span class="token punctuation">)</span>

<span class="token comment">-- 遍历JSON数组以检查座位的可用性</span>
<span class="token keyword">for</span> index<span class="token punctuation">,</span> jsonObj <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">(</span>jsonArray<span class="token punctuation">)</span> <span class="token keyword">do</span>
    <span class="token keyword">local</span> seatType <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>jsonObj<span class="token punctuation">.</span>seatType<span class="token punctuation">)</span>
    <span class="token keyword">local</span> count <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>jsonObj<span class="token punctuation">.</span>count<span class="token punctuation">)</span>
    <span class="token comment">-- 北京南_南京南_0</span>
    <span class="token keyword">local</span> actualInnerHashKey <span class="token operator">=</span> actualKey <span class="token operator">..</span> <span class="token string">&quot;_&quot;</span> <span class="token operator">..</span> seatType

    <span class="token comment">-- 从Redis哈希中获取当前座位可用性令牌值，KEYS[1]是当前列车的令牌桶key</span>
    <span class="token keyword">local</span> ticketSeatAvailabilityTokenValue <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;hget&#39;</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">tostring</span><span class="token punctuation">(</span>actualInnerHashKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment">-- 检查可用座位是否少于请求的数量</span>
    <span class="token keyword">if</span> ticketSeatAvailabilityTokenValue <span class="token operator">&lt;</span> count <span class="token keyword">then</span>
        <span class="token keyword">return</span> <span class="token number">1</span> <span class="token comment">-- 表示座位不足</span>
    <span class="token keyword">end</span>
<span class="token keyword">end</span>

<span class="token comment">-- 解码作为第二个参数传递的第二个JSON数组（ARGV数组）[北京南_南京南_0,南京南_上海虹桥_0]</span>
<span class="token keyword">local</span> alongJsonArrayStr <span class="token operator">=</span> ARGV<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
<span class="token keyword">local</span> alongJsonArray <span class="token operator">=</span> cjson<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>alongJsonArrayStr<span class="token punctuation">)</span>

<span class="token comment">-- 遍历第一个JSON数组并在Redis哈希中更新座位的可用性</span>
<span class="token keyword">for</span> index<span class="token punctuation">,</span> jsonObj <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">(</span>jsonArray<span class="token punctuation">)</span> <span class="token keyword">do</span>
    <span class="token keyword">local</span> seatType <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>jsonObj<span class="token punctuation">.</span>seatType<span class="token punctuation">)</span>
    <span class="token keyword">local</span> count <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>jsonObj<span class="token punctuation">.</span>count<span class="token punctuation">)</span>

    <span class="token comment">-- 遍历第二个JSON数组以获取起始和终点站</span>
    <span class="token keyword">for</span> indexTwo<span class="token punctuation">,</span> alongJsonObj <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">(</span>alongJsonArray<span class="token punctuation">)</span> <span class="token keyword">do</span>
        <span class="token keyword">local</span> startStation <span class="token operator">=</span> <span class="token function">tostring</span><span class="token punctuation">(</span>alongJsonObj<span class="token punctuation">.</span>startStation<span class="token punctuation">)</span>
        <span class="token keyword">local</span> endStation <span class="token operator">=</span> <span class="token function">tostring</span><span class="token punctuation">(</span>alongJsonObj<span class="token punctuation">.</span>endStation<span class="token punctuation">)</span>
        <span class="token keyword">local</span> actualInnerHashKey <span class="token operator">=</span> startStation <span class="token operator">..</span> <span class="token string">&quot;_&quot;</span> <span class="token operator">..</span> endStation <span class="token operator">..</span> <span class="token string">&quot;_&quot;</span> <span class="token operator">..</span> seatType

        <span class="token comment">-- 根据起始、终点站和座位类型在Redis哈希中减少座位计数</span>
        redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;hincrby&#39;</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">tostring</span><span class="token punctuation">(</span>actualInnerHashKey<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span>count<span class="token punctuation">)</span>
    <span class="token keyword">end</span>
<span class="token keyword">end</span>

<span class="token comment">-- 返回0表示成功检查和更新座位的可用性</span>
<span class="token keyword">return</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="本地锁" tabindex="-1"><a class="header-anchor" href="#本地锁" aria-hidden="true">#</a> 本地锁</h4><p>在分布式以及高并发的环境下，我们会发现每一次的有效请求都会向redis发起一次获取分布式锁的请求，我们可以让本地的线程先去争夺本地的锁，本地上锁成功后再去获取分布式锁。</p><p>我们可以类别，如果一个年纪有1000个人，有十个班，那么每个班就有100个人。当前要评审奖项，如果每个人都直接向年纪长发送请求，年纪长可能会忙不过来。所以我们可以让一个班的先去班级长处发送请求，在班级长这里获得通过后，再向年纪长发送请求，有点像缓存的概念。</p><p>但是这里又引出了死锁的问题，我们还是可以破坏环路等待的条件，对要获取的锁进行排序，首先每次先获取本地锁再获取分布式锁。</p><p>接着我们思考本地怎么存放锁，如果使用ConcurrentHashMap，我们会发现一旦我们删除列车数据或删除座位类型，我们没有很好的解决办法去删除对应的锁，最终可能占用内存过大或oom。所以我们采用了本地缓存组件Caffeine，设置过期时间为一天。</p><p>其实这个优化是不必须的，因为我们使用了令牌桶，有效的请求不会太多，这样Redis作为性能数据库，应该还是能够抗住这波削减后的流量的。</p><h4 id="end" tabindex="-1"><a class="header-anchor" href="#end" aria-hidden="true">#</a> End</h4><p>下面就是运用到以上三点后实现的V2版本，首先会去令牌桶获取令牌，隔绝大部分请求，接着就是对多把锁的获取，包括双重判定锁来初始化本地锁（有点绕），采用的是类对象来加锁</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">TicketPurchaseRespDTO</span> <span class="token function">purchaseTicketsV2</span><span class="token punctuation">(</span><span class="token class-name">PurchaseTicketReqDTO</span> requestParam<span class="token punctuation">)</span> <span class="token punctuation">{</span> purchaseTicketAbstractChainContext<span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token class-name">TicketChainMarkEnum</span><span class="token punctuation">.</span><span class="token constant">TRAIN_PURCHASE_TICKET_FILTER</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> requestParam<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> tokenResult <span class="token operator">=</span> ticketAvailabilityTokenBucket<span class="token punctuation">.</span><span class="token function">takeTokenFromBucket</span><span class="token punctuation">(</span>requestParam<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tokenResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServiceException</span><span class="token punctuation">(</span><span class="token string">&quot;列车站点已无余票&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ReentrantLock</span><span class="token punctuation">&gt;</span></span> localLockList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RLock</span><span class="token punctuation">&gt;</span></span> distributedLockList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">PurchaseTicketPassengerDetailDTO</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> seatTypeMap <span class="token operator">=</span> requestParam<span class="token punctuation">.</span><span class="token function">getPassengers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">PurchaseTicketPassengerDetailDTO</span><span class="token operator">::</span><span class="token function">getSeatType</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">PurchaseTicketPassengerDetailDTO</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> entryList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>seatTypeMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    entryList<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">.</span><span class="token function">comparingByKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    entryList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">Integer</span> searType <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> lockKey <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">resolvePlaceholders</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token constant">LOCK_PURCHASE_TICKETS_V2</span><span class="token punctuation">,</span> requestParam<span class="token punctuation">.</span><span class="token function">getTrainId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> searType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ReentrantLock</span> localLock <span class="token operator">=</span> localLockMap<span class="token punctuation">.</span><span class="token function">getIfPresent</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>localLock <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">TicketService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>localLock <span class="token operator">=</span> localLockMap<span class="token punctuation">.</span><span class="token function">getIfPresent</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    localLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    localLockMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span> localLock<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        localLockList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>localLock<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">RLock</span> distributedLock <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getFairLock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        distributedLockList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>distributedLock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        localLockList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">ReentrantLock</span><span class="token operator">::</span><span class="token function">lock</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        distributedLockList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">RLock</span><span class="token operator">::</span><span class="token function">lock</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> ticketService<span class="token punctuation">.</span><span class="token function">executePurchaseTickets</span><span class="token punctuation">(</span>requestParam<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        localLockList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>localLock <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                localLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ignored<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        distributedLockList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>distributedLock <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                distributedLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ignored<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="购票流程" tabindex="-1"><a class="header-anchor" href="#购票流程" aria-hidden="true">#</a> 购票流程</h3><p><code>executePurchaseTickets</code>方法就是具体的购票流程，V1和V2版本都是相同的，这里需要注意不能直接调用方法，否则会事务失效，需要注入。</p><p>由于代码大多数都是装填对象，我就直接说一下思路：</p><ul><li>首先通过TrainSeatTypeSelector#select方法自动分配座位（TrainSeatTypeSelector是自定义的座位选择器），同时对座位上锁。</li><li>创建票务对象，批量插入数据库。</li><li>RPC调用Order服务。</li></ul><h3 id="trainseattypeselector" tabindex="-1"><a class="header-anchor" href="#trainseattypeselector" aria-hidden="true">#</a> TrainSeatTypeSelector</h3><p>我们这里来说一下座位选择器，我们只了解它的选择运行架构，而不去真正的学习它的选择底层实现（代码太长了）。</p><ol><li><p>如果一个订单中有超过两种座位类型选票，那么我们会采用线程池去计算不同座位类型的选座（选座算法的时间复杂度较高，同时也存在多次的数据库读），同时采用并行流获取数据。</p></li><li><p>分配完毕座位后，我们会去远程调用一下用户服务，判断每个乘车人都已经在数据库中登记过并且审核过。</p></li><li><p>我们对座位进行锁定。</p></li></ol><p>对于第一点，我们的更详细的操作步骤是：</p><ul><li><p>调用选座算法进行选座</p></li><li><p>扣减余票缓存，但是我们需要先判断一下缓存更新的类型，如果项目采用的是监听binlog+RocketMQ，那么我们就无需手动扣减，我们扣减的就是下图的Redis结构：</p><p><img src="https://blog-zzys.oss-cn-beijing.aliyuncs.com/articles/32ece7cfea092096f407e768ac68b771.png" alt="" loading="lazy"></p></li></ul>`,76),o=[c];function e(u,l){return s(),a("div",null,o)}const k=n(p,[["render",e],["__file","票务服务.html.vue"]]);export{k as default};
