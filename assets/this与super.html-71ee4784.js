import{_ as e,r as p,o as c,c as o,a as n,b as s,d as l,e as a}from"./app-20538318.js";const i={},u=a(`<h2 id="this" tabindex="-1"><a class="header-anchor" href="#this" aria-hidden="true">#</a> this</h2><p>对象是<strong>数据</strong>的承载体，类是<strong>操作</strong>的承载体。因为一些对象操作相同，所以抽象为类。类可以看作对象的模板，但其实类也可以看作对象，在jvm类加载后成为<code>Class</code>对象。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token class-name">Student</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token class-name">Student</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
t<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面是伪代码，方法有<strong>隐式参数</strong>和<strong>显式参数</strong>的区分，隐参是方法名前的对象，显参是方法名后面的数值，静态方法没有隐参，所以在调用<code>t.study()</code>后，<strong>t会作为隐式参数传入study方法中</strong>。这样jvm在方法区中执行时才知道是哪个对象（数据）执行的方法。</p><p>查看编译后的字节码，果然，在<code>study</code>方法的本地变量表中出现了名字叫做<code>this</code>，类型为<code>Student</code>的引用。</p><img src="https://blog-zzys.oss-cn-beijing.aliyuncs.com/articles/463a5dafb162aeeb756b1a3afecf30e5.png" alt="image-20231117171508400" style="zoom:50%;"><p>同样在构造函数中也存在隐式传参，如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">F</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> _i<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        _i <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>_i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">S</span> <span class="token keyword">extends</span> <span class="token class-name">F</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">S</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删掉这一行？</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;S&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 1</span>
<span class="token comment">// com.zzys.S</span>
<span class="token comment">// S</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://blog-zzys.oss-cn-beijing.aliyuncs.com/articles/03dce9fa7654ba87d87cf84fc028e988.png" alt="image-20231117172312361" style="zoom:67%;"><p>同时我们可以发现，在父类中使用<code>getClass()</code>返回的是子类，由此可以看出，<strong>this是当前运行时的实例对象，无论是调用子类还是父类的方法</strong>。只有当运行时类没有某个属性或方法时，才会向上（父类）寻找。</p><h2 id="super" tabindex="-1"><a class="header-anchor" href="#super" aria-hidden="true">#</a> super</h2><p>还是上面的代码，同时可以发现，S继承于F，所以在S的构造函数中，必须在第一行只调用一次父类的构造函数。</p>`,12),d={href:"https://blog.csdn.net/weixin_43935927/article/details/113852227",target:"_blank",rel:"noopener noreferrer"},k=a(`<blockquote><ol><li>父类静态变量初始化 <code> &lt;cinit&gt;</code></li><li>父类静态语句块</li><li>子类静态变量初始化</li><li>子类静态语句块</li><li>父类变量初始化 <code>&lt;init&gt;</code></li><li>父类语句块</li><li>父类构造函数</li><li>子类变量初始化</li><li>子类语句块</li><li>子类构造函数</li></ol></blockquote><p>如果删掉第11行，就会报错。因为当S的构造函数不写<code>super()</code>时，会默认调用无参的<code>super()</code>，也就是会默认调用F的无参构造，但F并没有提供无参构造。</p><p>下面的子类不显示的指明<code>super</code>，同时父类有两个构造函数，如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">F</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">F</span> <span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">S</span> <span class="token keyword">extends</span> <span class="token class-name">F</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">S</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// com.zzys.S</span>
<span class="token comment">// com.zzys.S</span>
<span class="token comment">// com.zzys.S</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过字节码可知，super还是会隐式的调用父类的无参构造函数。</p><p><img src="https://blog-zzys.oss-cn-beijing.aliyuncs.com/articles/e187e5ba640813cafaf82d13e00b2cd3.png" alt="image-20231117173010965" loading="lazy"></p><p>对于<code>super</code>关键字来说，它起到的作用是调用父类方法，但是对于<code>getClass()</code>方法却有点特殊。</p><p>我们会发现，在子类中调用<code>super.getClass().getName()</code>竟然返回的也是子类的名称。原因是<code>getClass</code>是顶级类<code>Object</code>类所拥有的，并且是<code>final</code>修饰的，子类无法继承修改，所以无论<code>S</code>还是<code>F</code>都会到<code>Object</code>类中执行，而根据<code>getClass</code>源码可知：</p><p><strong>Returns the runtime class of this Object.</strong></p><p><code>getClass</code>方法会返回当前运行时类的Class，就可以明白为什么都是子类的名称了。</p><p>同样字节码如下：</p><p><img src="https://blog-zzys.oss-cn-beijing.aliyuncs.com/articles/935fd26fe020d75224cf37f1d1e8e431.png" alt="image-20231117173206229" loading="lazy"></p>`,12);function r(m,v){const t=p("ExternalLinkIcon");return c(),o("div",null,[u,n("p",null,[s("对象的初始化："),n("a",d,[s("对象初始化流程 --init 方法、cinit 方法_"),l(t)])]),k])}const g=e(i,[["render",r],["__file","this与super.html.vue"]]);export{g as default};
