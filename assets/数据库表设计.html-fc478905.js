import{_ as n,o as a,c as s,e as t}from"./app-20538318.js";const e={},p=t(`<h2 id="自定义策略" tabindex="-1"><a class="header-anchor" href="#自定义策略" aria-hidden="true">#</a> 自定义策略</h2><p>类型都是CLASS_BASED。</p><h3 id="单分片键" tabindex="-1"><a class="header-anchor" href="#单分片键" aria-hidden="true">#</a> 单分片键</h3><p>采用一个分片键，这种策略被称为standard</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">user_database_hash_mod</span><span class="token punctuation">:</span>
  <span class="token key atrule">type</span><span class="token punctuation">:</span> CLASS_BASED
  <span class="token key atrule">props</span><span class="token punctuation">:</span>
    <span class="token key atrule">sharding-count</span><span class="token punctuation">:</span> <span class="token number">32</span>
    <span class="token key atrule">table-sharding-count</span><span class="token punctuation">:</span> <span class="token number">16</span>
    <span class="token key atrule">strategy</span><span class="token punctuation">:</span> standard
    <span class="token key atrule">algorithmClassName</span><span class="token punctuation">:</span> org.opengoofy.index12306.framework.starter.database.algorithm.sharding.CustomDbHashModShardingAlgorithm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体的自定义实现如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">CustomDbHashModShardingAlgorithm</span> <span class="token keyword">implements</span> <span class="token class-name">StandardShardingAlgorithm</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SHARDING_COUNT_KEY</span> <span class="token operator">=</span> <span class="token string">&quot;sharding-count&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">TABLE_SHARDING_COUNT_KEY</span> <span class="token operator">=</span> <span class="token string">&quot;table-sharding-count&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> shardingCount<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> tableShardingCount<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Properties</span> props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        shardingCount <span class="token operator">=</span> <span class="token function">getShardingCount</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
        tableShardingCount <span class="token operator">=</span> <span class="token function">getTableShardingCount</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">doSharding</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> availableTargetNames<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">PreciseShardingValue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> shardingValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> suffix <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token function">hashShardingValue</span><span class="token punctuation">(</span>shardingValue<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> shardingCount <span class="token operator">/</span> tableShardingCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">ShardingAutoTableAlgorithmUtil</span><span class="token punctuation">.</span><span class="token function">findMatchedTargetName</span><span class="token punctuation">(</span>availableTargetNames<span class="token punctuation">,</span> suffix<span class="token punctuation">,</span> shardingValue<span class="token punctuation">.</span><span class="token function">getDataNodeInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">doSharding</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> availableTargetNames<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">RangeShardingValue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> shardingValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> availableTargetNames<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getShardingCount</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Properties</span> props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ShardingSpherePreconditions</span><span class="token punctuation">.</span><span class="token function">checkState</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token constant">SHARDING_COUNT_KEY</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">ShardingAlgorithmInitializationException</span><span class="token punctuation">(</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;Sharding count cannot be null.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token constant">SHARDING_COUNT_KEY</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getTableShardingCount</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Properties</span> props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ShardingSpherePreconditions</span><span class="token punctuation">.</span><span class="token function">checkState</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token constant">TABLE_SHARDING_COUNT_KEY</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">ShardingAlgorithmInitializationException</span><span class="token punctuation">(</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;Table sharding count cannot be null.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token constant">TABLE_SHARDING_COUNT_KEY</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">long</span> <span class="token function">hashShardingValue</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Object</span> shardingValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> shardingValue<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;CLASS_BASED&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="复合分片" tabindex="-1"><a class="header-anchor" href="#复合分片" aria-hidden="true">#</a> 复合分片</h3><p>举个例子，订单服务中t_order的分片就是复合分片，使用的是userid和orderid。当创建订单时，我们通过基因法将用户id的后六位将融入orderid中。同时在复合算法中，我们使用的是id的后六位取hash，这其中包含userid或orderid。我们借此可以通过userid和orderid查询订单。</p><p>这种策略被称为complex。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">order_database_complex_mod</span><span class="token punctuation">:</span>
  <span class="token key atrule">type</span><span class="token punctuation">:</span> CLASS_BASED
  <span class="token key atrule">props</span><span class="token punctuation">:</span>
    <span class="token key atrule">algorithmClassName</span><span class="token punctuation">:</span> com.zzys.railway.biz.orderservice.dao.algorithm.OrderCommonDataBaseComplexAlgorithm
    <span class="token key atrule">sharding-count</span><span class="token punctuation">:</span> <span class="token number">32</span>
    <span class="token key atrule">table-sharding-count</span><span class="token punctuation">:</span> <span class="token number">16</span>
    <span class="token key atrule">strategy</span><span class="token punctuation">:</span> complex
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 订单数据库复合分片算法配置
 *
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderCommonDataBaseComplexAlgorithm</span> <span class="token keyword">implements</span> <span class="token class-name">ComplexKeysShardingAlgorithm</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Getter</span>
    <span class="token keyword">private</span> <span class="token class-name">Properties</span> props<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> shardingCount<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> tableShardingCount<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SHARDING_COUNT_KEY</span> <span class="token operator">=</span> <span class="token string">&quot;sharding-count&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">TABLE_SHARDING_COUNT_KEY</span> <span class="token operator">=</span> <span class="token string">&quot;table-sharding-count&quot;</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">doSharding</span><span class="token punctuation">(</span><span class="token class-name">Collection</span> availableTargetNames<span class="token punctuation">,</span> <span class="token class-name">ComplexKeysShardingValue</span> shardingValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token punctuation">&lt;</span><span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> columnNameAndShardingValuesMap <span class="token operator">=</span> shardingValue<span class="token punctuation">.</span><span class="token function">getColumnNameAndShardingValuesMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>availableTargetNames<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollUtil</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>columnNameAndShardingValuesMap<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> userId <span class="token operator">=</span> <span class="token string">&quot;user_id&quot;</span><span class="token punctuation">;</span>
            <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> customerUserIdCollection <span class="token operator">=</span> columnNameAndShardingValuesMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollUtil</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>customerUserIdCollection<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">String</span> dbSuffix<span class="token punctuation">;</span>
                <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> comparable <span class="token operator">=</span> customerUserIdCollection<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>comparable <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">String</span> actualUserId <span class="token operator">=</span> comparable<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    dbSuffix <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token function">hashShardingValue</span><span class="token punctuation">(</span>actualUserId<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>actualUserId<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> shardingCount <span class="token operator">/</span> tableShardingCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    dbSuffix <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token function">hashShardingValue</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">)</span> comparable <span class="token operator">%</span> <span class="token number">1000000</span><span class="token punctuation">)</span> <span class="token operator">%</span> shardingCount <span class="token operator">/</span> tableShardingCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;ds_&quot;</span> <span class="token operator">+</span> dbSuffix<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token class-name">String</span> orderSn <span class="token operator">=</span> <span class="token string">&quot;order_sn&quot;</span><span class="token punctuation">;</span>
                <span class="token class-name">String</span> dbSuffix<span class="token punctuation">;</span>
                <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> orderSnCollection <span class="token operator">=</span> columnNameAndShardingValuesMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>orderSn<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> comparable <span class="token operator">=</span> orderSnCollection<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>comparable <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">String</span> actualOrderSn <span class="token operator">=</span> comparable<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    dbSuffix <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token function">hashShardingValue</span><span class="token punctuation">(</span>actualOrderSn<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>actualOrderSn<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> shardingCount <span class="token operator">/</span> tableShardingCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    dbSuffix <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token function">hashShardingValue</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">)</span> comparable <span class="token operator">%</span> <span class="token number">1000000</span><span class="token punctuation">)</span> <span class="token operator">%</span> shardingCount <span class="token operator">/</span> tableShardingCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;ds_&quot;</span> <span class="token operator">+</span> dbSuffix<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Properties</span> props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>props <span class="token operator">=</span> props<span class="token punctuation">;</span>
        shardingCount <span class="token operator">=</span> <span class="token function">getShardingCount</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
        tableShardingCount <span class="token operator">=</span> <span class="token function">getTableShardingCount</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getShardingCount</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Properties</span> props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ShardingSpherePreconditions</span><span class="token punctuation">.</span><span class="token function">checkState</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token constant">SHARDING_COUNT_KEY</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">ShardingAlgorithmInitializationException</span><span class="token punctuation">(</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;Sharding count cannot be null.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token constant">SHARDING_COUNT_KEY</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getTableShardingCount</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Properties</span> props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ShardingSpherePreconditions</span><span class="token punctuation">.</span><span class="token function">checkState</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token constant">TABLE_SHARDING_COUNT_KEY</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">ShardingAlgorithmInitializationException</span><span class="token punctuation">(</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;Table sharding count cannot be null.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token constant">TABLE_SHARDING_COUNT_KEY</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">long</span> <span class="token function">hashShardingValue</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> shardingValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> shardingValue<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;CLASS_BASED&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="用户服务" tabindex="-1"><a class="header-anchor" href="#用户服务" aria-hidden="true">#</a> 用户服务</h2><h3 id="t-user-x" tabindex="-1"><a class="header-anchor" href="#t-user-x" aria-hidden="true">#</a> t_user_x</h3><h4 id="表设计" tabindex="-1"><a class="header-anchor" href="#表设计" aria-hidden="true">#</a> 表设计</h4><ul><li><p>id：雪花算法。</p></li><li><p>username：全局唯一。</p></li><li><p>password：密码，使用bcrypt加密。</p></li><li><p>real_name，region，id_type，id_card，phone，telephone，mail，post_code，address：一些用户信息。</p></li><li><p>user_type：旅客类型（残疾，军人）</p></li><li><p>verify_status：审核状态（可能有风险）</p></li><li><p>deletion_time：注销时间戳</p></li></ul><h4 id="分库分表" tabindex="-1"><a class="header-anchor" href="#分库分表" aria-hidden="true">#</a> 分库分表</h4><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">t_user</span><span class="token punctuation">:</span>
	<span class="token key atrule">actualDataNodes</span><span class="token punctuation">:</span> ds_$<span class="token punctuation">{</span>0..1<span class="token punctuation">}</span>.t_user_$<span class="token punctuation">{</span>0..31<span class="token punctuation">}</span>
	<span class="token key atrule">databaseStrategy</span><span class="token punctuation">:</span>
		<span class="token key atrule">standard</span><span class="token punctuation">:</span>
			<span class="token key atrule">shardingColumn</span><span class="token punctuation">:</span> username
			<span class="token key atrule">shardingAlgorithmName</span><span class="token punctuation">:</span> custom_database_hash_mod <span class="token comment"># username&#39;s hashcode</span>
	<span class="token key atrule">tableStrategy</span><span class="token punctuation">:</span>
		<span class="token key atrule">standard</span><span class="token punctuation">:</span>
			<span class="token key atrule">shardingColumn</span><span class="token punctuation">:</span> username
			<span class="token key atrule">shardingAlgorithmName</span><span class="token punctuation">:</span> common_table_hash_mod
<span class="token comment">#common_table_hash_mod:</span>
<span class="token comment">#	type: HASH_MOD</span>
<span class="token comment">#	props:</span>
<span class="token comment">#		sharding-count: 32</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分库分表都是使用用户名进行分片</p><h3 id="t-user-phone-x-t-user-mail-x" tabindex="-1"><a class="header-anchor" href="#t-user-phone-x-t-user-mail-x" aria-hidden="true">#</a> t_user_phone_x&amp;t_user_mail_x</h3><h4 id="表设计-1" tabindex="-1"><a class="header-anchor" href="#表设计-1" aria-hidden="true">#</a> 表设计</h4><p>这两个表起到一个路由表的作用，在下文分库分表策略中会详细的讲解。</p><p>phone:</p><ul><li>id</li><li>username</li><li>phone</li><li>deletion_time</li></ul><p>mail:</p><ul><li>id</li><li>username</li><li>mail</li><li>deletion_time</li></ul><h4 id="分库分表-1" tabindex="-1"><a class="header-anchor" href="#分库分表-1" aria-hidden="true">#</a> 分库分表</h4><p>由于我们的应用支持手机号，邮箱，用户名三方登录，但是我们是按照用户名对t_user进行分片，我们在当前场景下又不可能使用基因法。所以在这里建立这两个路由表，类似二级索引回表查询。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">t_user_mail</span><span class="token punctuation">:</span>
  <span class="token key atrule">actualDataNodes</span><span class="token punctuation">:</span> ds_$<span class="token punctuation">{</span>0..1<span class="token punctuation">}</span>.t_user_mail_$<span class="token punctuation">{</span>0..31<span class="token punctuation">}</span>
  <span class="token key atrule">databaseStrategy</span><span class="token punctuation">:</span>
    <span class="token key atrule">standard</span><span class="token punctuation">:</span>
      <span class="token key atrule">shardingColumn</span><span class="token punctuation">:</span> mail
      <span class="token key atrule">shardingAlgorithmName</span><span class="token punctuation">:</span> custom_database_hash_mod <span class="token comment"># mail&#39;s hashcode</span>
  <span class="token key atrule">tableStrategy</span><span class="token punctuation">:</span>
    <span class="token key atrule">standard</span><span class="token punctuation">:</span>
      <span class="token key atrule">shardingColumn</span><span class="token punctuation">:</span> mail
      <span class="token key atrule">shardingAlgorithmName</span><span class="token punctuation">:</span> common_table_hash_mod
<span class="token key atrule">t_user_phone</span><span class="token punctuation">:</span>
  <span class="token key atrule">actualDataNodes</span><span class="token punctuation">:</span> ds_$<span class="token punctuation">{</span>0..1<span class="token punctuation">}</span>.t_user_phone_$<span class="token punctuation">{</span>0..31<span class="token punctuation">}</span>
  <span class="token key atrule">databaseStrategy</span><span class="token punctuation">:</span>
    <span class="token key atrule">standard</span><span class="token punctuation">:</span>
      <span class="token key atrule">shardingColumn</span><span class="token punctuation">:</span> phone
      <span class="token key atrule">shardingAlgorithmName</span><span class="token punctuation">:</span> custom_database_hash_mod <span class="token comment"># phone&#39;s hashcode</span>
  <span class="token key atrule">tableStrategy</span><span class="token punctuation">:</span>
    <span class="token key atrule">standard</span><span class="token punctuation">:</span>
      <span class="token key atrule">shardingColumn</span><span class="token punctuation">:</span> phone
      <span class="token key atrule">shardingAlgorithmName</span><span class="token punctuation">:</span> common_table_hash_mod
<span class="token comment">#common_table_hash_mod:</span>
<span class="token comment">#	type: HASH_MOD</span>
<span class="token comment">#	props:</span>
<span class="token comment">#		sharding-count: 32      </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="t-passenger-x" tabindex="-1"><a class="header-anchor" href="#t-passenger-x" aria-hidden="true">#</a> t_passenger_x</h3><h4 id="表设计-2" tabindex="-1"><a class="header-anchor" href="#表设计-2" aria-hidden="true">#</a> 表设计</h4><p>一个用户可以多名乘车人，可以用来买票时选择多人购票。用户表和乘车人表之间通过用户名进行关联，一对多的关联关系。</p><ul><li>id</li><li>username</li><li>real_name</li><li>id_type,id_card</li><li>discount_type：优惠类型</li><li>phone</li><li>create_date</li><li>verify_status</li></ul><h4 id="分库分表-2" tabindex="-1"><a class="header-anchor" href="#分库分表-2" aria-hidden="true">#</a> 分库分表</h4><p>和t_user表是相同的。</p><h3 id="信息加密" tabindex="-1"><a class="header-anchor" href="#信息加密" aria-hidden="true">#</a> 信息加密</h3><p>我们对关键信息进行加密，如文件所示。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">tables</span><span class="token punctuation">:</span>
  <span class="token key atrule">t_user</span><span class="token punctuation">:</span>
    <span class="token key atrule">columns</span><span class="token punctuation">:</span>
      <span class="token key atrule">id_card</span><span class="token punctuation">:</span>
        <span class="token key atrule">cipherColumn</span><span class="token punctuation">:</span> id_card
        <span class="token key atrule">encryptorName</span><span class="token punctuation">:</span> common_encryptor
      <span class="token key atrule">phone</span><span class="token punctuation">:</span>
        <span class="token key atrule">cipherColumn</span><span class="token punctuation">:</span> phone
        <span class="token key atrule">encryptorName</span><span class="token punctuation">:</span> common_encryptor
      <span class="token key atrule">mail</span><span class="token punctuation">:</span>
        <span class="token key atrule">cipherColumn</span><span class="token punctuation">:</span> mail
        <span class="token key atrule">encryptorName</span><span class="token punctuation">:</span> common_encryptor
      <span class="token key atrule">address</span><span class="token punctuation">:</span>
        <span class="token key atrule">cipherColumn</span><span class="token punctuation">:</span> address
        <span class="token key atrule">encryptorName</span><span class="token punctuation">:</span> common_encryptor
  <span class="token key atrule">t_passenger</span><span class="token punctuation">:</span>
    <span class="token key atrule">columns</span><span class="token punctuation">:</span>
      <span class="token key atrule">id_card</span><span class="token punctuation">:</span>
        <span class="token key atrule">cipherColumn</span><span class="token punctuation">:</span> id_card
        <span class="token key atrule">encryptorName</span><span class="token punctuation">:</span> common_encryptor
      <span class="token key atrule">phone</span><span class="token punctuation">:</span>
        <span class="token key atrule">cipherColumn</span><span class="token punctuation">:</span> phone
        <span class="token key atrule">encryptorName</span><span class="token punctuation">:</span> common_encryptor
    <span class="token key atrule">queryWithCipherColumn</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token key atrule">encryptors</span><span class="token punctuation">:</span>
  <span class="token key atrule">common_encryptor</span><span class="token punctuation">:</span>
    <span class="token key atrule">type</span><span class="token punctuation">:</span> AES
    <span class="token key atrule">props</span><span class="token punctuation">:</span>
      <span class="token key atrule">aes-key-value</span><span class="token punctuation">:</span> <span class="token number">123</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="订单服务" tabindex="-1"><a class="header-anchor" href="#订单服务" aria-hidden="true">#</a> 订单服务</h2><h3 id="t-order-x" tabindex="-1"><a class="header-anchor" href="#t-order-x" aria-hidden="true">#</a> t_order_x</h3><h4 id="表设计-3" tabindex="-1"><a class="header-anchor" href="#表设计-3" aria-hidden="true">#</a> 表设计</h4><p>订单表是订单的核心表，主要描述各个子订单的相同部分，注意多个乘车人除了可以在不同车厢、不同座位类型，其余的都相同，其他核心字段如下：</p><ul><li><p>id：雪花算法+通过基因法融合userid后六位。</p></li><li><p>order_sn：订单号，基因法融合用户id后六位。</p></li><li><p>user_id，user_name</p></li><li><p>train_id，train_number：1，G35</p></li><li><p>riding_date：乘车日期，精确到日</p></li><li><p>departure，arrival：出发，到达站点</p></li><li><p>source，status：订单来源，订单状态（已支付，已退款，待支付）</p></li><li><p>pay_type，pay_time：支付方式，支付时间。</p></li></ul><h4 id="分库分表-3" tabindex="-1"><a class="header-anchor" href="#分库分表-3" aria-hidden="true">#</a> 分库分表</h4><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">t_order</span><span class="token punctuation">:</span>
  <span class="token key atrule">actualDataNodes</span><span class="token punctuation">:</span> ds_$<span class="token punctuation">{</span>0..1<span class="token punctuation">}</span>.t_order_$<span class="token punctuation">{</span>0..31<span class="token punctuation">}</span>
  <span class="token key atrule">databaseStrategy</span><span class="token punctuation">:</span>
    <span class="token key atrule">complex</span><span class="token punctuation">:</span>
      <span class="token key atrule">shardingColumns</span><span class="token punctuation">:</span> user_id<span class="token punctuation">,</span>order_sn
      <span class="token key atrule">shardingAlgorithmName</span><span class="token punctuation">:</span> order_database_complex_mod
  <span class="token key atrule">tableStrategy</span><span class="token punctuation">:</span>
    <span class="token key atrule">complex</span><span class="token punctuation">:</span>
      <span class="token key atrule">shardingColumns</span><span class="token punctuation">:</span> user_id<span class="token punctuation">,</span>order_sn
      <span class="token key atrule">shardingAlgorithmName</span><span class="token punctuation">:</span> order_table_complex_mod
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分片采用复合分片算法，可以提供两个维度的查询：通过用户id查询订单，通过订单号查询订单。</p><h3 id="t-order-item-x" tabindex="-1"><a class="header-anchor" href="#t-order-item-x" aria-hidden="true">#</a> t_order_item_x</h3><h4 id="表设计-4" tabindex="-1"><a class="header-anchor" href="#表设计-4" aria-hidden="true">#</a> 表设计</h4><p>订单详情表是订单表中每个乘车人乘坐的详情信息，核心字段如下：</p><ul><li><p>id：雪花算法</p></li><li><p>order_sn：订单号，和t_order_x相同</p></li><li><p>user_id，user_name，real_name</p></li><li><p>id_type，id_card，phone：证件类型，证件号，手机号</p></li><li><p>train_id，carriage_number：1，01号车厢</p></li><li><p>seat_type，seat_number：<code>0：商务座，1：一等座，2：二等座</code>，05A号座位</p></li><li><p>status，amount：订单状态，订单金额</p></li></ul><h4 id="分库分表-4" tabindex="-1"><a class="header-anchor" href="#分库分表-4" aria-hidden="true">#</a> 分库分表</h4><p>和t_order相同。</p><h3 id="t-order-passenger-x" tabindex="-1"><a class="header-anchor" href="#t-order-passenger-x" aria-hidden="true">#</a> t_order_passenger_x</h3><h4 id="表设计-5" tabindex="-1"><a class="header-anchor" href="#表设计-5" aria-hidden="true">#</a> 表设计</h4><p>订单和乘车人的连表，有可能乘车人在乘车时并没有自己的账号，如果乘车人在注册自己的账号之后，应该能够查到自己的订单。但是由于分片的存在，用户id和订单id为复合分片键，我们很难通过t_order_item获取到相同的id_card的所有订单（读扩散）。当我们创建这个路由表（冗余表）后，再根据id_card分片，这样就可以满足要求。</p><ul><li><p>id：雪花算法</p></li><li><p>order_sn：订单号</p></li><li><p>id_type，id_card：证件类型，证件号</p></li></ul><h4 id="分库分表-5" tabindex="-1"><a class="header-anchor" href="#分库分表-5" aria-hidden="true">#</a> 分库分表</h4><p>如上述，我们采用id_card为分片键</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">t_order_item_passenger</span><span class="token punctuation">:</span>
  <span class="token key atrule">actualDataNodes</span><span class="token punctuation">:</span> ds_$<span class="token punctuation">{</span>0..1<span class="token punctuation">}</span>.t_order_item_passenger_$<span class="token punctuation">{</span>0..31<span class="token punctuation">}</span>
  <span class="token key atrule">databaseStrategy</span><span class="token punctuation">:</span>
    <span class="token key atrule">standard</span><span class="token punctuation">:</span>
      <span class="token key atrule">shardingColumn</span><span class="token punctuation">:</span> id_card
      <span class="token key atrule">shardingAlgorithmName</span><span class="token punctuation">:</span> order_passenger_relation_database_mod
  <span class="token key atrule">tableStrategy</span><span class="token punctuation">:</span>
    <span class="token key atrule">standard</span><span class="token punctuation">:</span>
      <span class="token key atrule">shardingColumn</span><span class="token punctuation">:</span> id_card
      <span class="token key atrule">shardingAlgorithmName</span><span class="token punctuation">:</span> order_passenger_relation_table_mod
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="信息加密-1" tabindex="-1"><a class="header-anchor" href="#信息加密-1" aria-hidden="true">#</a> 信息加密</h3><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>  <span class="token key atrule">t_order_item</span><span class="token punctuation">:</span>
    <span class="token key atrule">columns</span><span class="token punctuation">:</span>
      <span class="token key atrule">id_card</span><span class="token punctuation">:</span>
        <span class="token key atrule">cipherColumn</span><span class="token punctuation">:</span> id_card
        <span class="token key atrule">encryptorName</span><span class="token punctuation">:</span> common_encryptor
      <span class="token key atrule">phone</span><span class="token punctuation">:</span>
        <span class="token key atrule">cipherColumn</span><span class="token punctuation">:</span> phone
        <span class="token key atrule">encryptorName</span><span class="token punctuation">:</span> common_encryptor
    <span class="token key atrule">queryWithCipherColumn</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token key atrule">encryptors</span><span class="token punctuation">:</span>
  <span class="token key atrule">common_encryptor</span><span class="token punctuation">:</span>
    <span class="token key atrule">type</span><span class="token punctuation">:</span> AES
    <span class="token key atrule">props</span><span class="token punctuation">:</span>
      <span class="token key atrule">aes-key-value</span><span class="token punctuation">:</span> d6oadClrrb9A3GWo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="支付服务" tabindex="-1"><a class="header-anchor" href="#支付服务" aria-hidden="true">#</a> 支付服务</h2><h3 id="t-pay-x" tabindex="-1"><a class="header-anchor" href="#t-pay-x" aria-hidden="true">#</a> t_pay_x</h3><h4 id="表设计-6" tabindex="-1"><a class="header-anchor" href="#表设计-6" aria-hidden="true">#</a> 表设计</h4><p>订单表涉及的字段较多，大部分是和支付平台之间的交互，其中又包含了很多序列号。</p><ul><li>id：雪花算法</li><li>pay_sn：支付流水号，雪花算法</li><li>order_sn：订单号</li><li>out_order_sn：支付平台提供的订单号</li><li>channel：支付渠道（支付宝，微信）</li><li>trade_type：支付环境（APP，网页）</li><li>subject：订单标题（支付平台显示）</li><li>order_request_id：商户请求号（由商户定义需要保证不重复）</li><li>total_amount：交易总金额</li><li>trade_no：三方交易凭证号（支付平台提供）</li><li>gmt_payment：付款时间</li><li>pay_amount：付款金额</li><li>status：支付状态</li></ul><h4 id="分库分表-6" tabindex="-1"><a class="header-anchor" href="#分库分表-6" aria-hidden="true">#</a> 分库分表</h4><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">t_pay</span><span class="token punctuation">:</span>
  <span class="token key atrule">actualDataNodes</span><span class="token punctuation">:</span> ds_$<span class="token punctuation">{</span>0..1<span class="token punctuation">}</span>.t_pay_$<span class="token punctuation">{</span>0..31<span class="token punctuation">}</span>
  <span class="token key atrule">databaseStrategy</span><span class="token punctuation">:</span>
    <span class="token key atrule">complex</span><span class="token punctuation">:</span>
      <span class="token key atrule">shardingColumns</span><span class="token punctuation">:</span> order_sn<span class="token punctuation">,</span>pay_sn
      <span class="token key atrule">shardingAlgorithmName</span><span class="token punctuation">:</span> pay_database_complex_mod
  <span class="token key atrule">tableStrategy</span><span class="token punctuation">:</span>
    <span class="token key atrule">complex</span><span class="token punctuation">:</span>
      <span class="token key atrule">shardingColumns</span><span class="token punctuation">:</span> order_sn<span class="token punctuation">,</span>pay_sn
      <span class="token key atrule">shardingAlgorithmName</span><span class="token punctuation">:</span> pay_table_complex_mod
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和订单表的逻辑相同，同样采用order_sn,pay_sn复合分片，支持多维度查询。</p><h2 id="票务服务" tabindex="-1"><a class="header-anchor" href="#票务服务" aria-hidden="true">#</a> 票务服务</h2><p>票务服务中大部分表的数据量不会很大，每天的票务是通过定时任务刷新，所以没有涉及到分库分表。</p><h3 id="t-region" tabindex="-1"><a class="header-anchor" href="#t-region" aria-hidden="true">#</a> t_region</h3><p>地区表，基本上是以城市为单位。</p><ul><li>id：雪花算法</li><li>name：北京</li><li>full_name：北京市</li><li>code：BJP</li><li>initial：B</li><li>spell：beijing</li><li>popular_flag：1（代表是否是热门地区）</li></ul><h3 id="t-station" tabindex="-1"><a class="header-anchor" href="#t-station" aria-hidden="true">#</a> t_station</h3><p>以车站为单位，北京可以又北京南，北京西等车站。</p><ul><li>id</li><li>code：VNP</li><li>name：北京南</li><li>spell：beijingnan</li><li>region：BJP</li><li>region_name：北京</li></ul><h3 id="t-train" tabindex="-1"><a class="header-anchor" href="#t-train" aria-hidden="true">#</a> t_train</h3><p>火车数据表。</p><p>start_station，end_station，start_region，end_region实际上是冗余数据，由t_train_station_relation规定。</p><ul><li>id</li><li>train_number：G35</li><li>train_type：列车类型 0：高铁 1：动车 2：普通车</li><li>train_tag：列车标签 0：复兴号 1：智能动车组 2：静音车厢 3：支持选铺</li><li>train_brand：列车品牌类型 0：GC-高铁/城际 1：D-动车 2：Z-直达 3：T-特快 4：K-快速 5：其他 6：复兴号 7：智能动车组</li><li>start_station，end_station：起始站，终点站</li><li>start_region，end_region：起始地区，终点地区</li><li>sale_time，sale_status：销售时间，销售状态</li><li>departure_time，arrival_time：出发时间，到达时间</li></ul><h3 id="t-carriage" tabindex="-1"><a class="header-anchor" href="#t-carriage" aria-hidden="true">#</a> t_carriage</h3><p>车厢表</p><ul><li>id</li><li>train_id：关联的列车id</li><li>carriage_number：车厢号（01，02...）</li><li>carriage_type：车厢类型（商务，硬卧，软卧，行李车厢等）</li><li>seat_count：车厢内座位数量</li></ul><h3 id="t-seat" tabindex="-1"><a class="header-anchor" href="#t-seat" aria-hidden="true">#</a> t_seat</h3><p>座位表，假设有a-&gt;b-&gt;c路线的一个座位，那么对于一个实际存在的物理座位，实际上会存在三个逻辑座位，价格也不相同。</p><p>其中价格由t_train_station_price计算而来，起点终点由t_train_station_relation规定。</p><ul><li>id</li><li>train_id</li><li>carriage_number</li><li>seat_number：座位号（05F）</li><li>seat_type：座位类型</li><li>start_station：起始站</li><li>end_station：终点站</li><li>price：价格</li><li>seat_status：当前状态（可销售，已锁定，已销售）</li></ul><h3 id="t-train-station" tabindex="-1"><a class="header-anchor" href="#t-train-station" aria-hidden="true">#</a> t_train_station</h3><p>火车和站点的连表</p><ul><li>id</li><li>train_id</li><li>station_id：出发站点id</li><li>sequence：到站顺序</li><li>departure，arrival：出发站点，到达站点</li><li>start_region，end_region：出发地，到达地</li><li>departure_time，arrival_time：出发时间，到达时间</li><li>stopover_time：停留时间（分钟）</li></ul><p>举个例子：北京南-&gt;济南南-&gt;南京南，那么对于train_id、sequence、departure、arrival就有：</p><ul><li>1,01,北京南，济南南</li><li>1,02,济南南，南京南</li></ul><h3 id="t-train-station-price" tabindex="-1"><a class="header-anchor" href="#t-train-station-price" aria-hidden="true">#</a> t_train_station_price</h3><p>该表规定了所有的逻辑路线的所有类型座位的价格，t_seat的价格就是以此计算。</p><ul><li>id</li><li>train_id</li><li>departure，arrival：起始站点，到达站点</li><li>seat_type</li><li>price</li></ul><h3 id="t-train-station-relation" tabindex="-1"><a class="header-anchor" href="#t-train-station-relation" aria-hidden="true">#</a> t_train_station_relation</h3><p>列车站点关系表，该表规定了列车的中途站点</p><p>对于北京南到南京南，可能存在多条火车经过，以train_id作为区分</p><ul><li>id</li><li>train_id</li><li>departure，arrival</li><li>start_region，end_region</li><li>departure_flag，arrival_flag：说明着当前这条子线路是否是完整线路的起始站点或终止站点</li><li>departure_time，arrival_time</li></ul>`,100),l=[p];function o(i,c){return a(),s("div",null,l)}const r=n(e,[["render",o],["__file","数据库表设计.html.vue"]]);export{r as default};
