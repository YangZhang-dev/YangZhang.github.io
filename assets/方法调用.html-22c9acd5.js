import{_ as p,r as e,o,c,a as n,b as s,d as l,e as a}from"./app-20538318.js";const i={},u=a(`<p>本章为《深入理解Java虚拟机》8.3章的读书笔记，主要讲述Java中解析和分派的概念，同时解释了重载和重写的底层原理。</p><h2 id="方法调用字节码" tabindex="-1"><a class="header-anchor" href="#方法调用字节码" aria-hidden="true">#</a> 方法调用字节码</h2><p>invokestatic。用于调用<strong>静态</strong>方法。</p><p>invokespecial。用于调用实例<strong>构造器</strong><code>&lt;init&gt;()</code>方法、<strong>私有</strong>方法和父类中的方法。</p><p>invokevirtual。用于调用所有的<strong>虚</strong>方法。</p><p>invokeinterface。用于调用<strong>接口</strong>方法，会在运行时再确定一个实现该接口的对象。</p><h2 id="解析" tabindex="-1"><a class="header-anchor" href="#解析" aria-hidden="true">#</a> 解析</h2><p>如果说方法在程序真正运行之前就有一个可确定的调用版本，并且这个方法的调用版本在运行期是不可改变的。那么在类加载的解析阶段，会将其中的一部分<strong>符号引用</strong>转化为<strong>直接引用</strong>，这里方法的调用成为<strong>解析</strong>。</p><p>只要能被invokestatic和invokespecial指令调用的方法，以及final修饰的方法（但实际上final使用的是invokevirtual），都可以在解析阶段中确定唯一的调用版本，这些方法称为<strong>非虚方法</strong>，其他的方法称为<strong>虚方法</strong>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">F</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;f hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Resolution</span> <span class="token keyword">extends</span> <span class="token class-name">F</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">staticSay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;static hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">privateSay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;private hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Resolution</span> resolution <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Resolution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">staticSay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        resolution<span class="token punctuation">.</span><span class="token function">privateSay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://blog-zzys.oss-cn-beijing.aliyuncs.com/articles/efa19a3ca59ae39a8bd6133cfeb05552.png" alt="image-20231118233219923" style="zoom:67%;"><h2 id="分派" tabindex="-1"><a class="header-anchor" href="#分派" aria-hidden="true">#</a> 分派</h2><h3 id="静态分派" tabindex="-1"><a class="header-anchor" href="#静态分派" aria-hidden="true">#</a> 静态分派</h3><blockquote><p>方法签名是由：<strong>方法名称 + 参数类型 + 参数个数</strong>组成的一个唯一值，JVM就是通过这个方法签名来决定调用哪个方法的，也就是说返回值不计入重载的计算中。</p></blockquote><p>静态分配最常见的场景是重载，如下面代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">class</span> <span class="token class-name">StaticDispatch</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Human</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token keyword">extends</span> <span class="token class-name">Human</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Woman</span> <span class="token keyword">extends</span> <span class="token class-name">Human</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token class-name">Human</span> guy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello,guy!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token class-name">Man</span> guy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello,gentleman!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token class-name">Woman</span> guy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello,lady!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Human</span> man <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Human</span> woman <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Woman</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">StaticDispatch</span> sr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StaticDispatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sr<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span>man<span class="token punctuation">)</span><span class="token punctuation">;</span>
        sr<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span>woman<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// hello,guy!</span>
<span class="token comment">// hello,guy!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://blog-zzys.oss-cn-beijing.aliyuncs.com/articles/f47ecc15e961dcf7dc2a8d88a5d756dd.png" alt="image-20231119144022618" style="zoom:67%;"><p>首先，在<code>Human man = new Man();</code>中，我们对于左边的<code>Human</code>称其为<strong>静态类型</strong>，而对于右面的<code>Man</code>称其为<strong>动态类型</strong>。动态类型是在编译期不可预见的，只有在运行时才能确定其类型。同时，静态类型也是可变的，不过它是在编译期可见的，如强制类型转换。</p><p>编译器在重载时是通过<strong>参数</strong>的<strong>静态类型</strong>而不是实际类型作为判定依据的。由于静态类型在编译期可知，所以在编译阶段，Javac编译器就根据参数的静态类型决定了会使用哪个重载版本。在我看来，静态分派更类似与解析。</p><p>同时，重载的确定也不是唯一的，是在众多版本中选择最正确的哪一个，输入一个实际参数为char，待匹配的形式参数优先级如下：</p><p><code>char-&gt;int-&gt;long-&gt;float-&gt;double-&gt;Character-&gt;父类或接口-&gt;可变长参数</code></p><p>向short和byte转换时是不安全的，所以不会匹配上。当有接口和父类都存在重载版本时，就会提示类型模糊，需要显示的进行类型转换。</p><h3 id="动态分派" tabindex="-1"><a class="header-anchor" href="#动态分派" aria-hidden="true">#</a> 动态分派</h3><p>动态分派主要的应用场景是重写。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">class</span> <span class="token class-name">DynamicDispatch</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Human</span> <span class="token punctuation">{</span>
        <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token keyword">extends</span> <span class="token class-name">Human</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;man say hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Woman</span> <span class="token keyword">extends</span> <span class="token class-name">Human</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;woman say hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Human</span> man <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Human</span> woman <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Woman</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        man<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        woman<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        man <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Woman</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        man<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// man say hello</span>
<span class="token comment">// woman say hello</span>
<span class="token comment">// woman say hello</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://blog-zzys.oss-cn-beijing.aliyuncs.com/articles/5d04f1463daa25a357cf043b6463423c.png" alt="image-20231119173249744" loading="lazy"></p><p>在调用<code>invokevirtual</code>前，有一句<code>aload_1</code>字节码，它的意思是将本地变量表中1号槽的变量加载入操作数栈，以便后面使用。</p><p>当然，在运行时，加载入操作数栈的就是动态类型，而非静态类型，在这里可以称为方法的<strong>接收者</strong>。<code>invokevirtual</code>指令运行时的解析过程大致如下：</p><ol><li>找到操作数栈顶的第一个元素所指向的对象的<strong>实际类型</strong>，记作C。</li><li>如果在类型C中找到与常量中的描述符和简单名称都相符的方法，则进行访问权限校验，如果通过则返回这个方法的直接引用，查找过程结束；不通过则返回java.lang.IllegalAccessError异常。</li><li>否则，按照<strong>继承</strong>关系从下往上依次对C的各个父类进行第二步的搜索和验证过程。</li><li>如果始终没有找到合适的方法，则抛出java.lang.AbstractMethodError异常</li></ol><h4 id="关于字段" tabindex="-1"><a class="header-anchor" href="#关于字段" aria-hidden="true">#</a> 关于字段</h4><p>字段不具备多态性，也就是子类定义和父类相同的字段，会将父类的字段<strong>遮蔽</strong>（注意理解遮蔽的含义）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">FieldHasNoPolymorphic</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">int</span> money <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            money <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token function">showMeTheMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showMeTheMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;I am Father, i have $&quot;</span> <span class="token operator">+</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">int</span> money <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            money <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
            <span class="token function">showMeTheMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showMeTheMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;I am Son, i have $&quot;</span> <span class="token operator">+</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Father</span> gay <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;This gay has $&quot;</span> <span class="token operator">+</span> gay<span class="token punctuation">.</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;This gay has $&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Son</span><span class="token punctuation">)</span>gay<span class="token punctuation">)</span><span class="token punctuation">.</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// I am Son, i have $0</span>
<span class="token comment">// I am Son, i have $4</span>
<span class="token comment">// This gay has $2</span>
<span class="token comment">// This gay has $4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先在main中new了一个动态类型为Son的类，在调用Son的构造函数时，会先调用super()，即父类的构造函数。</p><p>在父类中首先将自己的money改变为2，接着调用showMeTheMoney方法。注意，这里就会出现多态的情况，由于运行时的动态类型为Son，所以，查找showMeTheMoney方法时就会从Son开始向上查找，这里子类已经重写了showMeTheMoney方法，自然调用的是子类的showMeTheMoney。</p><p>紧接着回到子类的构造方法，这里就出现了子类创建了和父类相同的字段，子类的money会将父类的money遮蔽，也就意味着，在子类中使用的money是子类自己的money，两个money在内存中存在两份地址。</p><p>再次回到main函数后，由于静态类型是Father类型，获取它的money属性自然是2，当将静态类型强制转换后，拿到的money就是属于Son的那份money。</p><h4 id="虚拟机实现" tabindex="-1"><a class="header-anchor" href="#虚拟机实现" aria-hidden="true">#</a> 虚拟机实现</h4><img src="https://blog-zzys.oss-cn-beijing.aliyuncs.com/articles/2b89df7ab9e24baa9955c0e8739a93f9.png" alt="image-20231117200350217" style="zoom:67%;"><p>一种基础而且常见的手段是为类型在方法区中建立一个<strong>虚方法表</strong>（Virtual Method Table，也称为vtable，与此对应的，在invokeinterface执行时也会用到<strong>接口方法表</strong>——Interface Method Table，简称itable），使用虚方法表索引来代替元数据查找以提高性能。</p><p>虚方法表中存放着各个方法的<strong>实际入口地址</strong>。如果某个方法在子类中<strong>没有</strong>被重写，那子类的虚方法表中的地址入口和父类相同方法的地址入口是<strong>一致</strong>的，都指向<strong>父类</strong>的实现入口。如果子类中重写了这个方法，子类虚方法表中的地址也会被替换为指向<strong>子类实现版本的入口地址</strong>。如下图，Son重写了来自Father的全部方法，因此Son的方法表没有指向Father类型数据的箭头。但是Son和Father都没有重写来自Object的方法，所以它们的方法表中所有从Object继承来的方法都指向了Object的数据类型。</p><img src="https://blog-zzys.oss-cn-beijing.aliyuncs.com/articles/f094b70b48e7fd3e98991f6d59d4ea73.png" alt="image-20231119181502848" style="zoom:67%;"><h4 id="去虚化-devirtualization" tabindex="-1"><a class="header-anchor" href="#去虚化-devirtualization" aria-hidden="true">#</a> 去虚化（devirtualization）</h4>`,42),k={href:"https://zhuanlan.zhihu.com/p/483910917",target:"_blank",rel:"noopener noreferrer"},r=a("<p>去虚化是一种思想，解释起来就是“<strong>不需要通过虚分派而可以直接调用目标</strong>”。它与下面所有要讲的优化手段都属于编译器优化（<strong>这里与下文中的编译器是指C1或C2即时编译器</strong>）</p><p><strong>类层级分析</strong>（Class Hierarchy Analysis，简称CHA）</p><p>如果你认为JVM对于虚方法的优化只有vtable那就大错特错了。事实上如果需要查找vtable对JVM来说已经是一种很慢的分派了。</p><p>其实在上文中我们已经提到 final 是否可以提升虚方法性能的问题，理论上 final 直接告诉JVM关闭了“动态绑定”看起来似乎是更高效的，它直接指定了一个唯一的方法版本让JVM完成分派。但为什么我在上文中否定了final更快这个答案呢？我们继续看看CHA是怎么做的。</p><p>CHA是整个应用程序范围内的类型分析技术，用于确定在目前已加载的类中，某个接口是否有多于一种的实现、某个类是否存在子类、某个子类是否覆盖了父类的某个虚方法等信息。这样，编译器在内联（方法内联，编译器重要的优化手段）时就会根据不同的情况采用不同的处理</p><ul><li>非虚方法：这是一种完全去虚化（devirtualize）并且完全内联，没有任何虚方法分派或调用的开销。</li><li>虚方法但只有一个版本：这是一种条件去虚化并内联（guarded devirtualize），有简单的直接类型检查的开销，除此之外没有额外的调用开销。但因为java程序是动态链接的，如果虚拟机在执行过程中方法的接收者的继承关系发生了变化，则会放弃编译，退回解释状态执行。否则这个内联优化的代码可以一直执行下去。</li><li>虚方法但有多个版本：即时编译器做出的最后一次努力，使用内联缓存（inline cache）的方式，有直接类型检查的开销，也有直接调用的开销。他会在第一次调用发生时记录下方法接收者的版本信息，并且在每次调用时都比较接收者的版本。如果每次调用的方法版本都是一样的，那么这时它就是一种单态内联缓存（monomorphic inline cache），此时的性能还是略优于直接查vtable的。但如果出现方法接收者不一致的情况，就说明程序真的用到了虚方法的多态性，这时候会退化成超多态内联缓存（megamorphic inline cache）此时实际上已经是通过vtable来查找目标方法了，这是最慢的情况之一。</li></ul>",6);function d(m,v){const t=e("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("以下内容来自："),n("a",k,[s("多态在底层如何实现? "),l(t)])]),r])}const y=p(i,[["render",d],["__file","方法调用.html.vue"]]);export{y as default};
