import{_ as e,r as p,o as t,c,a as n,b as o,d as i,e as s}from"./app-20538318.js";const l={},r=s(`<h2 id="extern" tabindex="-1"><a class="header-anchor" href="#extern" aria-hidden="true">#</a> extern</h2><p>通常在.h文件中声明</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// f1.c</span>
<span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token comment">// f1.h</span>
<span class="token keyword">extern</span> <span class="token keyword">int</span> x<span class="token punctuation">;</span>

<span class="token comment">// f2.c</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;f1.h&quot;</span></span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="宏" tabindex="-1"><a class="header-anchor" href="#宏" aria-hidden="true">#</a> 宏</h2>`,4),d={href:"https://wizardforcel.gitbooks.io/lcthw/content/ex20.html",target:"_blank",rel:"noopener noreferrer"},u=s(`<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">log_info</span><span class="token expression"><span class="token punctuation">(</span>M<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> </span><span class="token string">&quot;[INFO] (%s:%d) &quot;</span> <span class="token expression">M </span><span class="token string">&quot;\\n&quot;</span><span class="token expression"><span class="token punctuation">,</span> <span class="token constant">__FILE__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">,</span> </span><span class="token punctuation">##</span><span class="token expression">__VA_ARGS__<span class="token punctuation">)</span></span></span>

<span class="token comment">// __FILE__ 打印文件名, __LINE__ 打印当前执行的是第几行</span>
<span class="token comment">// ... 和 ##__VA_ARGS__ 搭配使用达成可变参数的作用</span>
<span class="token comment">// 其中 M 是我们的模板字符串</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">check</span><span class="token expression"><span class="token punctuation">(</span>A<span class="token punctuation">,</span> M<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">log_err</span><span class="token punctuation">(</span>M<span class="token punctuation">,</span> </span><span class="token punctuation">##</span><span class="token expression">__VA_ARGS__<span class="token punctuation">)</span><span class="token punctuation">;</span> errno<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">goto</span> error<span class="token punctuation">;</span> <span class="token punctuation">}</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">check_mem</span><span class="token expression"><span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token string">&quot;Out of memory.&quot;</span><span class="token expression"><span class="token punctuation">)</span></span></span>

<span class="token comment">// 在check_mem 中实现了宏的嵌套，宏是递归展开的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="预处理编译链接" tabindex="-1"><a class="header-anchor" href="#预处理编译链接" aria-hidden="true">#</a> 预处理编译链接</h2><p>预处理的本质是文本的粘贴替换</p><p>主要作用：</p><ul><li>把头文件的内容粘贴进来</li><li>把宏递归展开</li><li>#ifdef 条件编译处理</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看预处理后的文件</span>
gcc <span class="token parameter variable">-E</span> f1.c <span class="token operator">|</span> <span class="token function">vim</span> -
<span class="token comment"># 查看预处理的详细信息，可用于查看 &lt;&gt; 系统头文件的查询顺序</span>
gcc <span class="token parameter variable">-E</span> <span class="token parameter variable">--verbose</span> f2.c <span class="token operator">&gt;</span> /dev/null
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用户头文件：</p><ol><li>当前目录下</li><li><code>-I</code>参数：<code>gcc -I./include/ -c f.c</code></li></ol><p>GCC编译链接：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>// 通过 <span class="token parameter variable">-I</span> 参数指定头文件扫描的目录
gcc <span class="token parameter variable">-c</span> f1.c f2.c -I./include
gcc f1.o f2.o <span class="token parameter variable">-o</span> f

// 直接编译为可执行文件
gcc <span class="token parameter variable">-c</span> f.c <span class="token parameter variable">-o</span> f
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="函数指针" tabindex="-1"><a class="header-anchor" href="#函数指针" aria-hidden="true">#</a> 函数指针</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 函数指针，声明了一个指针变量</span>
<span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>callme<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 为入参是两个int，返回值是一个int的函数起了一个别名（类型）</span>
<span class="token keyword">typedef</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>callme<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>fptr<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token class-name">fptr_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    fptr <span class="token operator">=</span> add<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">fptr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fptr_t</span> fptr2 <span class="token operator">=</span> add<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">fptr2</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="静态链接" tabindex="-1"><a class="header-anchor" href="#静态链接" aria-hidden="true">#</a> 静态链接</h2><p>将多个<code>.o</code>文件归档为一个<code>.a</code>文件，链接器在链接时可以选择性的链接需要的符号。</p><h3 id="创建静态库" tabindex="-1"><a class="header-anchor" href="#创建静态库" aria-hidden="true">#</a> 创建静态库</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// myhello.h</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">MYHELLO_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MYHELLO_H</span></span>

<span class="token keyword">int</span> <span class="token function">print_a_message</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token comment">// myhello.c</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;myhello.h&quot;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">print_a_message</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 生成.o文件</span>
gcc <span class="token parameter variable">-c</span> myhello.c

<span class="token comment"># 生成静态链接库,命名规范：libxxx.a</span>
ar <span class="token parameter variable">-rc</span> libmyhello.a myhello.o

<span class="token comment"># -t 查看当前静态链接库中含有哪些.o文件</span>
ar <span class="token parameter variable">-t</span> libmyhello.a 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// test.c</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;myhello.h&quot;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">print_a_message</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># -L. 指定用户要扫描的目录</span>
<span class="token comment"># -l 指定静态链接库的名称</span>
gcc test.c -L. <span class="token parameter variable">-lmyhello</span> <span class="token parameter variable">-o</span> <span class="token builtin class-name">test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="动态链接" tabindex="-1"><a class="header-anchor" href="#动态链接" aria-hidden="true">#</a> 动态链接</h2><h3 id="隐式动态链接" tabindex="-1"><a class="header-anchor" href="#隐式动态链接" aria-hidden="true">#</a> 隐式动态链接</h3><p>隐式链接在编译/链接阶段完成，由编译系统根据动态库的头文件和库文件进行编译和链接。从而确定待调用的函数原形和地址。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>// 生成动态链接库
gcc <span class="token parameter variable">-fPIC</span> <span class="token parameter variable">-shared</span> <span class="token parameter variable">-o</span> libmyhello.so myhello.c
// 进行链接
gcc test.c -L. <span class="token parameter variable">-lmyhello</span> <span class="token parameter variable">-o</span> <span class="token builtin class-name">test</span>
// 执行报错
<span class="token operator">&gt;</span> ./test: error <span class="token keyword">while</span> loading shared libraries: libmyhello.so: cannot <span class="token function">open</span> shared object file: No such <span class="token function">file</span> or directory
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>推荐方法：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">vim</span> /etc/ld.so.conf
<span class="token comment"># 加入当前.so 文件的绝对路径</span>
<span class="token function">sudo</span> ldconfig <span class="token parameter variable">-v</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用<code>nm -g libmyhello.so</code>查找当前动态链接库中导出的符号</li><li>使用<code>ldd test</code> 查看当前程序的动态链接库</li></ul><h3 id="显式动态链接" tabindex="-1"><a class="header-anchor" href="#显式动态链接" aria-hidden="true">#</a> 显式动态链接</h3><p>利用API函数实现加载和卸载共享库，获取带调用函数，变量地址，获取错误信息等功能，需要手动指定符号。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// my.h</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">MYHELLO_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MYHELLO_H</span></span>
<span class="token keyword">int</span> my_number <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">add_two_ints</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token comment">// my.c</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;my.h&quot;</span></span>

<span class="token keyword">int</span> <span class="token function">add_two_ints</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// test.c</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;dlfcn.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span>  </span>

<span class="token keyword">typedef</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>add_two_ints<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>lib_file <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>data1 <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token operator">*</span>lib <span class="token operator">=</span> <span class="token function">dlopen</span><span class="token punctuation">(</span>lib_file<span class="token punctuation">,</span> RTLD_NOW<span class="token punctuation">)</span><span class="token punctuation">;</span>

    add_two_ints func2 <span class="token operator">=</span> <span class="token function">dlsym</span><span class="token punctuation">(</span>lib<span class="token punctuation">,</span> <span class="token string">&quot;add_two_ints&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> my_number <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">dlsym</span><span class="token punctuation">(</span>lib<span class="token punctuation">,</span> <span class="token string">&quot;my_number&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Result: %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token function">atoi</span><span class="token punctuation">(</span>data1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>my_number<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    
    <span class="token function">dlclose</span><span class="token punctuation">(</span>lib<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和隐式动态链接相同的构建动态库，也需要配置路径，只是在链接时：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>// 进行链接
gcc test.c <span class="token parameter variable">-ldl</span> <span class="token parameter variable">-o</span> <span class="token builtin class-name">test</span>
// 执行, 其中 ./ 一定要带
./test ./libmy.so <span class="token number">1</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="静动混合" tabindex="-1"><a class="header-anchor" href="#静动混合" aria-hidden="true">#</a> 静动混合</h3><p>当有重名的静态动态文件时，默认链接动态，若要链接静态，则需：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gcc test.c -L. <span class="token parameter variable">-lmyhello</span> <span class="token parameter variable">-static</span> <span class="token parameter variable">-o</span> <span class="token builtin class-name">test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>若要指定静态动态库：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gcc test.c -L. -Wl,Bstatic <span class="token parameter variable">-lmy1</span> -Wl,Bdynamic <span class="token parameter variable">-lmy2</span> <span class="token parameter variable">-o</span> <span class="token builtin class-name">test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="三种链接混合举例" tabindex="-1"><a class="header-anchor" href="#三种链接混合举例" aria-hidden="true">#</a> 三种链接混合举例</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// my1.h 使用静态链接</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">MY1_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MY1_H</span></span>
<span class="token keyword">extern</span> <span class="token keyword">int</span> x<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token comment">// my1.c</span>
<span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token comment">// my2.h 使用隐式动态链接</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">MY2_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MY2_H</span></span>
<span class="token keyword">extern</span> <span class="token keyword">int</span> y<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token comment">// my2.c</span>
<span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token comment">// my3.h 使用显式动态链接</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">MY3_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MY3_H</span></span>
<span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token comment">// my3.c</span>
<span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// test.c</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;dlfcn.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;dbg.h&quot;</span>    </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;my1.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;my2.h&quot;</span></span>

<span class="token keyword">typedef</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>add<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>lib <span class="token operator">=</span> <span class="token function">dlopen</span><span class="token punctuation">(</span><span class="token string">&quot;./libmy3.so&quot;</span><span class="token punctuation">,</span> RTLD_NOW<span class="token punctuation">)</span><span class="token punctuation">;</span>
    add func <span class="token operator">=</span> <span class="token function">dlsym</span><span class="token punctuation">(</span>lib<span class="token punctuation">,</span> <span class="token string">&quot;add&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;result = %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">func</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gcc <span class="token parameter variable">-c</span> my1.c
ar <span class="token parameter variable">-rc</span> libmy1.a my1.o

gcc <span class="token parameter variable">-fPIC</span> <span class="token parameter variable">-shared</span> <span class="token parameter variable">-o</span> libmy2.so my2.c

gcc <span class="token parameter variable">-fPIC</span> <span class="token parameter variable">-shared</span> <span class="token parameter variable">-o</span> libmy3.so my3.c
// <span class="token parameter variable">-g</span> 用于生成gdb调试信息
gcc test.c <span class="token parameter variable">-g</span> -L. -Wl,-Bstatic <span class="token parameter variable">-lmy1</span> -Wl,-Bdynamic <span class="token parameter variable">-lmy2</span> <span class="token parameter variable">-ldl</span> <span class="token parameter variable">-o</span> <span class="token builtin class-name">test</span>

./test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,41);function k(v,m){const a=p("ExternalLinkIcon");return t(),c("div",null,[r,n("p",null,[n("a",d,[o("练习20：Zed的强大的调试宏 · 笨办法学C"),i(a)])]),u])}const h=e(l,[["render",k],["__file","C编程杂记.html.vue"]]);export{h as default};
