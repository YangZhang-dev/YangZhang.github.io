import{_ as t,r as e,o,c,a as n,b as a,d as l,e as s}from"./app-20538318.js";const i={},u=s('<h2 id="一面" tabindex="-1"><a class="header-anchor" href="#一面" aria-hidden="true">#</a> 一面</h2><p>一面只问了一些基础的问题。</p><ul><li><p>自我介绍</p></li><li><p>数组、链表、栈、队列、二叉树的特点和使用场景</p></li><li><p>数组和链表的逆序</p></li><li><p>快速排序，归并排序</p></li><li><p>第二个项目为什么用Golang</p></li><li><p>channel</p></li><li><p>map、实现线程安全</p></li><li><p>锁</p></li><li><p>redis基本数据类型</p></li><li><p>缓存击穿、缓存雪崩、缓存穿透</p></li><li><p>有没有面其他的厂，收到offer？</p></li><li><p>为什么百度面试挂了</p></li><li><p>反问：业务场景、对于转岗的看法</p></li></ul><h2 id="二面" tabindex="-1"><a class="header-anchor" href="#二面" aria-hidden="true">#</a> 二面</h2><p>一面之后直接就二面了，效率很高，二面的面试官也很好，会带着一步步讲解。二面大多数是结合具体的场景来说，延伸一些八股，项目说的很少。</p>',5),k=s(`<li><p>对于第二个项目的应用层的map是怎么解决并发冲突的（高性能）</p></li><li><p>第一个项目中的令牌桶中的lua脚本的实现逻辑</p></li><li><p>defer的特性</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
      <span class="token keyword">defer</span> <span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,3),r={href:"https://www.cnblogs.com/devhg/p/14063460.html",target:"_blank",rel:"noopener noreferrer"},d=s(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> F <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> S1 <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s S1<span class="token punctuation">)</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">type</span> S2 <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>S2<span class="token punctuation">)</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s1Val <span class="token operator">:=</span> S1<span class="token punctuation">{</span><span class="token punctuation">}</span>
	s1Ptr <span class="token operator">:=</span> <span class="token operator">&amp;</span>S1<span class="token punctuation">{</span><span class="token punctuation">}</span>
	s2Val <span class="token operator">:=</span> S2<span class="token punctuation">{</span><span class="token punctuation">}</span>
	s2Ptr <span class="token operator">:=</span> <span class="token operator">&amp;</span>S2<span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token keyword">var</span> i F
	i <span class="token operator">=</span> s1Val
	i <span class="token operator">=</span> s1Ptr
	i <span class="token operator">=</span> s2Ptr
	i <span class="token operator">=</span> s2Val <span class="token comment">// error</span>
	<span class="token boolean">_</span> <span class="token operator">=</span> i
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),v=s(`<li><p>切片相关问题</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   a <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
   b <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
   <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;address of a: &quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>
   <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;address of b: &quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>
   a <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
   b <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
   <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;address of a: &quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>
   <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;address of b: &quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>
   <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>
   <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>闭包</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> i <span class="token builtin">int</span>
    <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
		i<span class="token operator">++</span>
        <span class="token keyword">return</span> i
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    c <span class="token operator">:=</span> <span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">PrintIn</span><span class="token punctuation">(</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">PrintIn</span><span class="token punctuation">(</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>向closed的channel中写</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">read</span><span class="token punctuation">(</span>c <span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token operator">&lt;-</span>c
   <span class="token operator">&lt;-</span>c
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span>
   c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
   <span class="token keyword">go</span> <span class="token function">read</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
   c <span class="token operator">&lt;-</span> <span class="token string">&quot;hello&quot;</span>
   <span class="token function">close</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
   c <span class="token operator">&lt;-</span> <span class="token string">&quot;world&quot;</span>
   <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>channel的死锁</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span>
   c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span>
   c <span class="token operator">&lt;-</span> <span class="token string">&quot;world&quot;</span>
   <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>redis zset指令时间复杂度：zrange key start end、 zcard key 、zadd</p></li><li><p>数据库场景</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> your_table_name <span class="token punctuation">(</span>
    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
    <span class="token keyword">data</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">INDEX</span><span class="token punctuation">,</span>
    create_time <span class="token keyword">DATETIME</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 每日有几十万的数据入库，获取某一天的所有data数据(想要的答案是模拟索引，因为create_time是创建时间，实际上全表就是按照create_time有序排列的，我们可以获取当天的起始和终止点，按照索引的思想范围查询)</span>
<span class="token comment">-- 如果加索引会降低插入的效率，并且会锁表</span>
<span class="token comment">-- 暂不考虑分库分表</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>TCP拥塞控制、慢启动</p></li><li><p>http2 http3优化</p></li><li><p>10Tb日志文件 urlPath 种类未知 50Mb内存计算出top 10的urlPath和urlPath出现的次数</p></li>`,9);function m(b,f){const p=e("ExternalLinkIcon");return o(),c("div",null,[u,n("ul",null,[k,n("li",null,[n("p",null,[a("值接收器和指针接收器与接口的关系，哪一行会报错"),n("a",r,[a("值类型、指针类型接收器和接口类型赋值总结"),l(p)])]),d]),v])])}const h=t(i,[["render",m],["__file","Golang-万声音乐-实习-23-12-27.html.vue"]]);export{h as default};
