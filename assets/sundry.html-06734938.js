import{_ as n,r as t,o as l,c as r,a as e,b as a,d as c,e as s}from"./app-20538318.js";const i={},d=e("h2",{id:"在地图上有一些点-我想用一个圆框柱这些点-怎么让这个圆圈住更多的点",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#在地图上有一些点-我想用一个圆框柱这些点-怎么让这个圆圈住更多的点","aria-hidden":"true"},"#"),a(" 在地图上有一些点，我想用一个圆框柱这些点，怎么让这个圆圈住更多的点？")],-1),_={href:"https://blog.csdn.net/qq_45735851/article/details/114690719",target:"_blank",rel:"noopener noreferrer"},h=s('<h2 id="深拷贝跟浅拷贝有什么区别" tabindex="-1"><a class="header-anchor" href="#深拷贝跟浅拷贝有什么区别" aria-hidden="true">#</a> 深拷贝跟浅拷贝有什么区别</h2><p>以嵌套对象和指针入手，浅拷贝内部的引用类型指向的是同一个对象，而深拷贝会创建一个新的对象。</p><p>java：</p><ul><li>实现<code>Cloneable</code>接口并重写<code>clone</code>方法</li><li>序列化和反序列化 反射</li><li>定制化</li></ul><p>go：</p><p>Go语言中所有赋值操作都是值传递，如果结构中不含指针，则直接赋值就是深度拷贝；如果结构中含有指针（包括自定义指针，以及切片，map等使用了指针的内置类型），则数据源和拷贝之间对应指针会共同指向同一块内存，这时深度拷贝需要特别处理。</p><ul><li>序列化 反射</li><li>定制化</li></ul>',7);function p(u,f){const o=t("ExternalLinkIcon");return l(),r("div",null,[d,e("p",null,[a("Welzl，最小覆盖圆问题，"),e("a",_,[a("最小圆覆盖问题 算法步骤与证明+代码模板"),c(o)])]),h])}const x=n(i,[["render",p],["__file","sundry.html.vue"]]);export{x as default};
