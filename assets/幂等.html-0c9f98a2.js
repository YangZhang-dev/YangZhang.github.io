import{_ as t,r as o,o as i,c as d,a as e,b as a,d as n,e as h}from"./app-20538318.js";const s={},l=e("p",null,"本文介绍的幂等的概念，以及幂等的场景和解决办法。",-1),c=e("p",null,"参考",-1),p={href:"https://www.bilibili.com/video/BV1aG4y1f7RA/",target:"_blank",rel:"noopener noreferrer"},_={href:"https://blog.csdn.net/yuhaiyang_1/article/details/81040967",target:"_blank",rel:"noopener noreferrer"},u={href:"https://zhuanlan.zhihu.com/p/410179971",target:"_blank",rel:"noopener noreferrer"},f={href:"https://zhuanlan.zhihu.com/p/345512692",target:"_blank",rel:"noopener noreferrer"},b=h('<h2 id="幂等" tabindex="-1"><a class="header-anchor" href="#幂等" aria-hidden="true">#</a> 幂等</h2><p>幂等就是调用多次接口只会产生相同的结果，不会改变业务状态。</p><p>幂等的场景通常有：</p><ul><li>RestAPI：包括我们的对外HTTP接口，可能会出现前端表单重复提交的情况。RPC接口，可能出现超时重试的机制。</li><li>MQ：消息中间件保证消息的可靠性的同时，也会有消息重复消费的可能。</li></ul><h2 id="token" tabindex="-1"><a class="header-anchor" href="#token" aria-hidden="true">#</a> Token</h2><p>开放一个获取Token的接口，前端获取token，后面的请求带上token，后端存入Redis中，设上有效时间。后端收到请求后，把Redis中的token删除，这样后面的请求发过来时，查询token为空，就直接返回。</p><h2 id="redis" tabindex="-1"><a class="header-anchor" href="#redis" aria-hidden="true">#</a> Redis</h2><p>采用分布式锁，设计一个唯一id，使用AOP加自定义注解环绕指定接口。超时时间的设计</p><h3 id="restapi场景" tabindex="-1"><a class="header-anchor" href="#restapi场景" aria-hidden="true">#</a> RestAPI场景</h3><p>唯一id可以有多种设计方法，一是以访问的路径名加参数的md5值为id。另一种是采用SpEL通过一些方法生成指定的id。</p><h3 id="mq场景" tabindex="-1"><a class="header-anchor" href="#mq场景" aria-hidden="true">#</a> MQ场景</h3><p>MQ场景是在消费方做幂等，通常使用SpEL方法，通过SpEL方法可以获取到收到的message，获取其中的唯一键。同时在Redis维护消息的消费状态，如果在发现重复请求并且还处于消费状态，那么就走异常处理。</p><h2 id="乐观锁" tabindex="-1"><a class="header-anchor" href="#乐观锁" aria-hidden="true">#</a> 乐观锁</h2><p>在表中加入一个<code>version</code>字段，每次更新时先获取version，在后面的更新操作中加入<code>where version=?</code>。判断影响的行数，如果影响0行，那么直接返回成功，因为已经有人改过了。</p><h2 id="唯一索引" tabindex="-1"><a class="header-anchor" href="#唯一索引" aria-hidden="true">#</a> 唯一索引</h2><p>建立一张去重表，以原表中的多个字段的和作为<strong>唯一索引</strong>，如用户名+手机号，当多个请求同时进入时，只会有一个请求在去重表中插入，注意去重表和原表要在同一个事务中，不然在原表中发生异常，去重表也无法回滚。</p><h2 id="状态机" tabindex="-1"><a class="header-anchor" href="#状态机" aria-hidden="true">#</a> 状态机</h2><p>对于表中有状态的字段，如订单的创建，付款，退款等等，它是有顺序的，可以在更新时加上<code>where status=1</code>来保证幂等性。</p>',18);function k(m,x){const r=o("ExternalLinkIcon");return i(),d("div",null,[l,c,e("ul",null,[e("li",null,[e("a",p,[a("介绍幂等的视频"),n(r)]),a("。")]),e("li",null,[e("a",_,[a("什么是幂等，什么情况下需要幂等，如何实现幂等"),n(r)]),a("。")]),e("li",null,[e("a",u,[a("面试官：给我一个避免消息重复消费的解决方案？"),n(r)])]),e("li",null,[e("a",f,[a("阿里面试官：接口的幂等性怎么设计？"),n(r)])])]),b])}const R=t(s,[["render",k],["__file","幂等.html.vue"]]);export{R as default};
