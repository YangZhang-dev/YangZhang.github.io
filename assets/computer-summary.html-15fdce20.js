import{_ as e,o as n,c as r,e as t,a,b as s}from"./app-20538318.js";const i={},l=t('<h2 id="_1-计算机系统简介" tabindex="-1"><a class="header-anchor" href="#_1-计算机系统简介" aria-hidden="true">#</a> 1. 计算机系统简介</h2><p>计算机系统由硬件和软件两部分构成。其中硬件是指计算机的实体部分，由各种电子元器件和其他各种器件构成。软件是由人们事先编写好的具有各种功能的程序。通常寄寓在各类媒体中（RAM，ROM等），存储在主存和辅存中。</p><p>软件又分为系统软件和应用软件，系统软件是用来管理整个计算机系统，监视服务，是系统资源得到合理调度，高效使用，包括：标准程序库，语言处理程序（汇编程序，编译程序），操作系统，服务程序，数据库软件，网络软件。应用软件是用户根据任务编制的各种程序。</p><h3 id="_1-1-计算机系统层次" tabindex="-1"><a class="header-anchor" href="#_1-1-计算机系统层次" aria-hidden="true">#</a> 1.1 计算机系统层次</h3><p>下图是计算机系统层次结构图解：</p><p><img src="http://blog-zzys.oss-cn-beijing.aliyuncs.com/articles/计算机系统的层次结构.jpg" alt="" loading="lazy"></p><p>早期计算机只有<strong>机器语言</strong>（0，1），编写难度很大，但是可以由计算机直接执行，执行机器语言的机器称为实际机器M1。</p><p>后面出现了符号化的程序设计程序，即<strong>汇编语言</strong>。但它不能直接执行，必须由<strong>汇编程序</strong>翻译为机器语言才可执行，因此M3不是一台实际的机器，称之为虚拟机器M3。</p><p>从本质来讲汇编语言仍然是一个面向实际机器的语言，它的每一条指令对应机器语言的每一条01语句，所以出现了<strong>高级语言</strong>。当然高级语言是需要翻译为汇编语言再翻译为机器语言，或直接翻译为机器语言才能执行。这些工作由虚拟机M4来执行。通常将高级语言翻译为机器语言的软件称为<strong>翻译程序</strong>。翻译程序分为<strong>编译程序</strong>和<strong>解释程序</strong>。</p><p>之后，在M1下发展出了微程序机器M0，它将M1中的一条指令翻译为一组微指令，构成一个微程序。</p><p>实际上在实际机器和虚拟机器中，还存在一个虚拟机器M2，它是由<strong>操作系统</strong>软件构成，提供汇编程序和高级语言程序的一些基本操作，同时还起到控制和管理计算机全部硬件和软件资源的作用。</p><h3 id="_1-2-计算机组成和计算机体系结构" tabindex="-1"><a class="header-anchor" href="#_1-2-计算机组成和计算机体系结构" aria-hidden="true">#</a> 1.2 计算机组成和计算机体系结构</h3><p>计算机体系结构是程序员可见的计算机系统的属性，即概念性的结构和功能特性。例如：指令集，存储器寻址技术，数据类型等，大多属于抽象的概念。计算机系统由多级层次结构，站在不同的层次锁看到的计算机属性也是不同的。</p><p>计算机组成是指如何实现计算机体系结构所体现的属性。例如指令系统体现了机器的属性，这是属于计算机结构的问题。但指令的实现，即如何取指令，分析指令，取操作数，运算，送结果，则是计算机组成的问题。</p><h2 id="_2-计算机基本组成" tabindex="-1"><a class="header-anchor" href="#_2-计算机基本组成" aria-hidden="true">#</a> 2. 计算机基本组成</h2><h3 id="_2-1-冯-诺伊曼计算机" tabindex="-1"><a class="header-anchor" href="#_2-1-冯-诺伊曼计算机" aria-hidden="true">#</a> 2.1 冯. 诺伊曼计算机</h3><p>冯诺依曼计算机的五大特性：</p><ul><li>计算机由运算器，存储器，控制器，输入设备和输出设备五大部件构成。</li><li>指令和数据以<strong>同等的地位</strong>存放于存储器中，并可按地址寻访。</li><li>指令和数据均以<strong>二进制</strong>数表示。</li><li>指令由<strong>操作码</strong>和<strong>地址码</strong>组成，操作码用来表示操作的性质，地址码用来表示操作数在存储器中的位置。</li><li>指令在存储器中按顺序存放。通常，指令是按顺序执行的，在特定条件下，可根据运算结构或根据设定的条件改变执行顺序。</li><li>机器以运算器为中心，输入输出设备与存储器间的数据传输通过运算器完成。</li></ul><p>注意：现代的计算机已转化为以存储器为中心，结构框图如下：</p><p><img src="http://blog-zzys.oss-cn-beijing.aliyuncs.com/articles/计算机结构框图.jpg" alt="" loading="lazy"></p><ul><li>运算器用来完成算术运算和逻辑运算，并将运算的中间结果暂存在运算器中。</li><li>存储器用来存放数据和程序。</li><li>控制器用来控制、指挥程序和数据的输入、运行以及处理运算结果。</li><li>输入设备用来将人们熟悉的信息形式转换为机器能识别的信息形式。</li><li>输出备将计算机计算的结构转换为人们熟悉的信息形式</li></ul><p>通常将运算器和控制器集成在同一芯片上，称为<strong>CPU</strong>，把输入设备和输出设备称为<strong>I/O设备</strong>。这样现代计算机可认为由三大部分组成：CPU，I/O设备以及主存储器。CPU和主存储器由可称为<strong>主机</strong>，I/O设备称为外部设备。</p><h3 id="_2-2-计算机组成概述" tabindex="-1"><a class="header-anchor" href="#_2-2-计算机组成概述" aria-hidden="true">#</a> 2.2 计算机组成概述</h3><p>下图是细化的计算机组成框图： <img src="http://blog-zzys.oss-cn-beijing.aliyuncs.com/articles/细化的计算机结构框图.jpg" alt="" loading="lazy"></p><h4 id="_2-2-1-主存储器" tabindex="-1"><a class="header-anchor" href="#_2-2-1-主存储器" aria-hidden="true">#</a> 2.2.1 主存储器</h4><p>简称主存或内存。存储体由许多存储单元组成，每个存储单元又包含若干个存储元件，每个原件可存放一位二进制代码0或1。可见一个存储单元可存储一串二进制代码，称其为<strong>存储字</strong>，位数称为<strong>存储字长</strong>。</p><p>主存的工作方式是按照存储单元的地址来对存储字的各位进行存取，这种方式称为按地址存取方式（访存）。这种方式有三个好处：只需要给出程序的首地址，PC加一就可以获取到下一条指令的地址。当需要重复的指令时，只需给出地址而不许占用更多的存储单元进行重复存放。指令和数据是同等地位，所以取一条指令和数据的操作是完全相同的，只需一条控制线路即可完成两种操作。</p><p>为了能实现按地址访问，还需要两个寄存器：<strong>MAR</strong>（存储地址寄存器）、<strong>MDR</strong>（存储数据寄存器）。现代计算机通常将它们集成在CPU中。</p>',28),h=a("p",null,[s("MAR用来存放将要访问的存储单元的地址，其位数对应存储单元的个数（10位，存储单元为"),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("msup",null,[a("mn",null,"2"),a("mn",null,"10")]),a("mo",null,"="),a("mn",null,"1024")]),a("annotation",{encoding:"application/x-tex"},"2^{10}=1024")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.8141em"}}),a("span",{class:"mord"},[a("span",{class:"mord"},"2"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.8141em"}},[a("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},[a("span",{class:"mord mtight"},"10")])])])])])])])]),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"="),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6444em"}}),a("span",{class:"mord"},"1024")])])]),s("个存储单元，也就是1K）。MDR用来存放存存储体中取出的数据，或即将要存入的数据。")],-1),o=t('<h4 id="_2-2-2-运算器" tabindex="-1"><a class="header-anchor" href="#_2-2-2-运算器" aria-hidden="true">#</a> 2.2.2 运算器</h4><p>最简单的运算器包含三个寄存器ACC（累加器），MQ（乘商寄存器），X（X寄存器）和一个算数逻辑单元ALU。四种运算步骤见P15页。</p><h4 id="_2-2-3-控制器" tabindex="-1"><a class="header-anchor" href="#_2-2-3-控制器" aria-hidden="true">#</a> 2.2.3 控制器</h4><p>控制器的工作通常分为三大步骤：取指阶段，分析阶段，执行阶段。控制器由PC（程序计数器），IR（指令寄存器），CU（控制单元）。</p><p>PC用来存放将要执行的指令的地址，它和MAR有一条直接的通路，并具有自动加1（逻辑）的功能，即可自动形成下一条指令的地址。IR用来存放当前执行指令，来自于MDR，IR中的操作码OP（IR）送至CU，用来分析指令，IR中的地址码Ad（IR）作为操作数的地址送至MAR。CU用来分析当前指令完成所需的操作，并发出各种为操作命令序列，控制所有对象协作运行。</p><h2 id="_3-计算机硬件的主要技术指标" tabindex="-1"><a class="header-anchor" href="#_3-计算机硬件的主要技术指标" aria-hidden="true">#</a> 3. 计算机硬件的主要技术指标</h2><h3 id="_3-1-机器字长" tabindex="-1"><a class="header-anchor" href="#_3-1-机器字长" aria-hidden="true">#</a> 3.1 机器字长</h3><p>机器字长是指CPU一次能处理数据的位数，通常与CPU的寄存器位数有关，字长越长表示的精度越高，但是也会影响计算机运行的速度，但是如果字长较短，对于位数较多的数据就需要两次或多次运算才能完成，也会影响速度。</p><h3 id="_3-2-存储容量" tabindex="-1"><a class="header-anchor" href="#_3-2-存储容量" aria-hidden="true">#</a> 3.2 存储容量</h3><p>存储器的容量应包括主存容量（CPU可以直接访问）和辅存容量。主存容量是指主存中存放二进制代码的总位数：<code>存储容量=存储单元的个数*存储字长</code>。</p>',10),p=[l,h,o];function c(d,g){return n(),r("div",null,p)}const _=e(i,[["render",c],["__file","computer-summary.html.vue"]]);export{_ as default};
