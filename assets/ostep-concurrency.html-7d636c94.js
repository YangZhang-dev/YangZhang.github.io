import{_ as t,r as e,o,c,a as n,b as s,d as l,e as a}from"./app-20538318.js";const i={},u=a(`<p>本章主要讲了并发的相关知识。</p><h2 id="并发简介" tabindex="-1"><a class="header-anchor" href="#并发简介" aria-hidden="true">#</a> 并发简介</h2><p><strong>多线程</strong>（multi-threaded）程序通常会有多个执行点（PC），线程之间类似于进程，但是有一点区别：同一个进程中的线程是共享地址空间的，能够访问到相同的数据。</p><p>所以当线程之间上下文切换时，类似于进程需要将状态保存到PCB中，线程需要将状态保存到<strong>线程控制块</strong>（Thread Control Block，TCB）中，但是地址空间保持不变，即页表不需要被切换（这里应该指的时同一进程之间的线程切换）。</p><img src="https://blog-zzys.oss-cn-beijing.aliyuncs.com/articles/71bc8787dd0e461b797122271d5ad24a.png" alt="image-20230821104926890" style="zoom:67%;"><p>左侧时单线程的地址空间模型，右侧时多线程地址空间模型。</p><h3 id="不可控的调度" tabindex="-1"><a class="header-anchor" href="#不可控的调度" aria-hidden="true">#</a> 不可控的调度</h3><p>线程创建后的执行顺序是不确定的。</p><p>由于在高级语言中的<code>a = a + 1</code>在汇编代码中会被分解为三步：</p><div class="language-assembly line-numbers-mode" data-ext="assembly"><pre class="language-assembly"><code>mov 0x8049a1c, %eax 
add $0x1, %eax 
mov %eax, 0x8049a1c 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在多线程的条件下，假设a初始值为1，有可能会存在一个线程在执行完<code>add</code>后，被时钟中断，切换到另一个线程，这个线程成功的执行了三行代码，将a存为2，但是当第一个线程重新执行时，又一次将a存为2，这样就出现了错误。</p><p><strong>竞态条件</strong>（race condition）指的是两个或者以上进程或者线程并发执行时，其最终的结果依赖于进程或者线程执行的精确时序。同时，将这种存在于多个线程之间的访问共享资源的代码片段称为<strong>临界区</strong>（critical section）。</p><h3 id="解决" tabindex="-1"><a class="header-anchor" href="#解决" aria-hidden="true">#</a> 解决</h3><p>一是使用<strong>互斥</strong>（mutual exclusion）。这个属性保证了如果一个线程在临界区内执行，其他线程将被阻止进入临界区。</p><p>二是<strong>原子性</strong>（atomicity），保证多个指令要么全部成功，要么全部失败。</p><h2 id="锁" tabindex="-1"><a class="header-anchor" href="#锁" aria-hidden="true">#</a> 锁</h2><p>通过在临界区周围加<strong>锁</strong>（lock），来保证临界区能够像单条原子指令一样执行。</p><h3 id="锁的基本思想" tabindex="-1"><a class="header-anchor" href="#锁的基本思想" aria-hidden="true">#</a> 锁的基本思想</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 流程示例</span>
<span class="token class-name">lock_t</span> mutex<span class="token punctuation">;</span>

<span class="token function">lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token function">unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过一个锁变量，保证了锁在某一时刻的状态，要么是可用的（available，或 unlocked，或 free），要么是被占用的（acquired，或 locked，或 held），当一个线程上锁后，其他线程只能阻塞等待锁的释放。</p><blockquote><p>POSIX 库将锁称为互斥量（mutex）</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">pthread_mutex_t</span> lock <span class="token operator">=</span> PTHREAD_MUTEX_INITIALIZER<span class="token punctuation">;</span> 
<span class="token function">Pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span> 
balance <span class="token operator">=</span> balance <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> 
<span class="token function">Pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="锁的评判标准" tabindex="-1"><a class="header-anchor" href="#锁的评判标准" aria-hidden="true">#</a> 锁的评判标准</h3><ul><li><strong>互斥</strong>（mutual exclusion）：这是锁是否有效的基础。</li><li><strong>公平性</strong>（fairness）：每个竞争线程有公平的机会抢到锁，如果不是公平的，那么有可能由线程会发生<strong>饥饿</strong>（starve）的情况。</li><li><strong>性能</strong>（performance）：加锁肯定意味着性能的下降，那么如何将性能的影响降到最低是关键。不同的场景对性能的影响都需要考虑：一种是一个 CPU 上多个线程竞争，性能如何？一种是多个 CPU、多个线程竞争时的性能。</li></ul><h3 id="控制中断" tabindex="-1"><a class="header-anchor" href="#控制中断" aria-hidden="true">#</a> 控制中断</h3><p>在临界区关闭中断，可以保证指令运行的原子性。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
	<span class="token function">DisableInterrupts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
<span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
	<span class="token function">EnableInterrupts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>缺点：</p><ul><li>需要允许所有调用线程执行特权操作。</li><li>不支持多处理器。</li><li>关闭中断导致其他的中断信息丢失。</li><li>效率低。</li></ul><h3 id="基础思想" tabindex="-1"><a class="header-anchor" href="#基础思想" aria-hidden="true">#</a> 基础思想</h3><p>用一个变量来标志锁是否被某些线程占用。第一个线程进入临界区，调用 lock()，检查标志是否为 1（这里不是 1），然后设置标志为 1，表明线程持有该锁。结束临界区时，线程调用 unlock()，清除标志，表示锁未被持有。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">lock_t</span> <span class="token punctuation">{</span> <span class="token keyword">int</span> flag<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token class-name">lock_t</span><span class="token punctuation">;</span> 

<span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">lock_t</span> <span class="token operator">*</span>mutex<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token comment">// 0 -&gt; lock is available, 1 -&gt; held </span>
    mutex<span class="token operator">-&gt;</span>flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 

<span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token class-name">lock_t</span> <span class="token operator">*</span>mutex<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">while</span> <span class="token punctuation">(</span>mutex<span class="token operator">-&gt;</span>flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// TEST the flag </span>
    <span class="token punctuation">;</span> <span class="token comment">// spin-wait (do nothing) </span>
    mutex<span class="token operator">-&gt;</span>flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// now SET it! </span>
<span class="token punctuation">}</span> 
 
<span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token class-name">lock_t</span> <span class="token operator">*</span>mutex<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
	mutex<span class="token operator">-&gt;</span>flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>缺点：</p><ul><li>加锁过程存在临界区代码，会发生线程冲突。</li><li>阻塞的线程不断自旋等待，效率低。</li></ul><h3 id="硬件原语" tabindex="-1"><a class="header-anchor" href="#硬件原语" aria-hidden="true">#</a> 硬件原语</h3><h4 id="可用的自旋锁" tabindex="-1"><a class="header-anchor" href="#可用的自旋锁" aria-hidden="true">#</a> 可用的自旋锁</h4><p>在这里必须要借用硬件支持，最简单的硬件原语是<strong>测试并设置指令</strong>（test-and-set instruction），也叫作<strong>原子交换</strong>（atomic exchange）。可以通过下面的代码理解它的工作流程：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">TestAndSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>old_ptr<span class="token punctuation">,</span> <span class="token keyword">int</span> new<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">int</span> old <span class="token operator">=</span> <span class="token operator">*</span>old_ptr<span class="token punctuation">;</span> <span class="token comment">// fetch old value at old_ptr </span>
    <span class="token operator">*</span>old_ptr <span class="token operator">=</span> new<span class="token punctuation">;</span> <span class="token comment">// store &#39;new&#39; into old_ptr </span>
    <span class="token keyword">return</span> old<span class="token punctuation">;</span> <span class="token comment">// return the old value </span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在它执行中，整个过程是原子的。使用它来实现自旋锁：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">lock_t</span> <span class="token punctuation">{</span> 
    <span class="token keyword">int</span> flag<span class="token punctuation">;</span> 
<span class="token punctuation">}</span> <span class="token class-name">lock_t</span><span class="token punctuation">;</span> 

<span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">lock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token comment">// 0 indicates that lock is available, 1 that it is held </span>
    lock<span class="token operator">-&gt;</span>flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 

 <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token class-name">lock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">TestAndSet</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token operator">-&gt;</span>flag<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> 
    <span class="token punctuation">;</span> <span class="token comment">// spin-wait (do nothing) </span>
<span class="token punctuation">}</span> 

<span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token class-name">lock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    lock<span class="token operator">-&gt;</span>flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就解决的第一个问题，现在加锁是线程安全的了。对于评价指标：</p><ul><li>可以互斥。</li><li>无公平性。</li><li>在单CPU上，性能很差。但是在多核CPU上，性能还可以。</li></ul><h4 id="比较并交换" tabindex="-1"><a class="header-anchor" href="#比较并交换" aria-hidden="true">#</a> 比较并交换</h4><p>另一种硬件原语是<strong>比较并交换</strong>（compare-and-swap，CAS），伪代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">CompareAndSwap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> <span class="token keyword">int</span> expected<span class="token punctuation">,</span> <span class="token keyword">int</span> new<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">int</span> actual <span class="token operator">=</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span> 
    <span class="token keyword">if</span> <span class="token punctuation">(</span>actual <span class="token operator">==</span> expected<span class="token punctuation">)</span> 
    	<span class="token operator">*</span>ptr <span class="token operator">=</span> new<span class="token punctuation">;</span> 
    <span class="token keyword">return</span> actual<span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>检查当前内存值和期待值是否相同，如果相同，则更新为新值。返回内存中的实际值。</p><p>可以用它来实现加锁。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token class-name">lock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">CompareAndSwap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token operator">-&gt;</span>flag<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> 
		<span class="token punctuation">;</span> <span class="token comment">// spin </span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>其他的一些硬件原语：</p><ul><li>链接的加载 load-linked）和条件式存储（store-conditional）</li><li>获取并增加（fetch-and-add）</li></ul></blockquote><h3 id="代替自旋" tabindex="-1"><a class="header-anchor" href="#代替自旋" aria-hidden="true">#</a> 代替自旋</h3><p>在保证了加锁的线程安全，现在就需要解决自旋过多消耗CPU资源的问题。</p><h4 id="yield" tabindex="-1"><a class="header-anchor" href="#yield" aria-hidden="true">#</a> yield</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 

<span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">TestAndSet</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>flag<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> 
    <span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// give up the CPU </span>
<span class="token punctuation">}</span> 

<span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过使用<code>yield()</code>函数，可以使当前线程放弃CPU的使用权，从运行状态转变为就绪状态，重新参与CPU的竞争。</p><p>缺点：</p><ul><li>在大量线程竞争的情况下，会发生频繁的上下文切换，影响性能。</li><li>可能会发生饥饿的情况。</li></ul><h4 id="休眠队列" tabindex="-1"><a class="header-anchor" href="#休眠队列" aria-hidden="true">#</a> 休眠队列</h4><p>使用一个队列来保存等待锁的线程。同时park()能够让调用线程休眠，unpark(threadID)则会唤醒 threadID 标识的线程。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">lock_t</span> <span class="token punctuation">{</span>
    <span class="token comment">// 标识当前的锁是否被占用</span>
    <span class="token keyword">int</span> flag<span class="token punctuation">;</span>
    <span class="token comment">// 充当自旋的作用，用来保证flag和queue的操作是原子的</span>
    <span class="token keyword">int</span> guard<span class="token punctuation">;</span>
    <span class="token comment">// 休眠队列</span>
    <span class="token class-name">queue_t</span> <span class="token operator">*</span>q<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token class-name">lock_t</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">lock_init</span><span class="token punctuation">(</span><span class="token class-name">lock_t</span> <span class="token operator">*</span>m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    m<span class="token operator">-&gt;</span>flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    m<span class="token operator">-&gt;</span>guard <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">queue_init</span><span class="token punctuation">(</span>m<span class="token operator">-&gt;</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token class-name">lock_t</span> <span class="token operator">*</span>m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 通过自旋获取到锁的操作权</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">TestAndSet</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token operator">-&gt;</span>guard<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">;</span> <span class="token comment">//acquire guard lock by spinning</span>
    
    <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token operator">-&gt;</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 锁没有使用者</span>
        m<span class="token operator">-&gt;</span>flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 标识锁被占用</span>
        m<span class="token operator">-&gt;</span>guard <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 放开对锁的操作权</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> 
        <span class="token function">queue_add</span><span class="token punctuation">(</span>m<span class="token operator">-&gt;</span>q<span class="token punctuation">,</span> <span class="token function">gettid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将当当前线程的tid加入队列</span>
        m<span class="token operator">-&gt;</span>guard <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 放开对锁的操作权</span>
        <span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 使当前线程睡眠</span>
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span> 

<span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token class-name">lock_t</span> <span class="token operator">*</span>m<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token comment">// 通过自旋获取到锁的操作权</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">TestAndSet</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token operator">-&gt;</span>guard<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> 
        <span class="token punctuation">;</span> <span class="token comment">//acquire guard lock by spinning </span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">queue_empty</span><span class="token punctuation">(</span>m<span class="token operator">-&gt;</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span> 
        m<span class="token operator">-&gt;</span>flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 如果队列中没有线程等待，那么就直接将锁放开</span>
    <span class="token keyword">else</span> 
        <span class="token function">unpark</span><span class="token punctuation">(</span><span class="token function">queue_remove</span><span class="token punctuation">(</span>m<span class="token operator">-&gt;</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 否则就直接从队列中唤醒下一个线程</span>
    m<span class="token operator">-&gt;</span>guard <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 放开对锁的操作权</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里面存在一个线程安全的问题：</p><ul><li>线程a获取到锁。</li><li>线程b运行到park后被中断。</li><li>a释放锁需要unpark，但是b还没有park。</li><li>再次中断，b运行park。</li></ul><p>这样b就有可能永远的睡眠下去，这被称为<strong>唤醒/等待竞争</strong>（wakeup/waiting race）。</p><blockquote><p>Solaris 通过增加了第三个系统调用 separk()来解决这一问题。通过 setpark()，一个线程表明自己马上要 park。如果刚好另一个线程被调度，并且调用了 unpark，那么后续的 park调用就会直接返回，而不是一直睡眠。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">queue_add</span><span class="token punctuation">(</span>m<span class="token operator">-&gt;</span>q<span class="token punctuation">,</span> <span class="token function">gettid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token function">setpark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// new code </span>
m<span class="token operator">-&gt;</span>guard <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="linux下的实现" tabindex="-1"><a class="header-anchor" href="#linux下的实现" aria-hidden="true">#</a> Linux下的实现</h3><p>nptl库（gnu libc 库的一部分）中 lowlevellock.h关于锁的代码：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">mutex_lock</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>mutex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> v<span class="token punctuation">;</span>
    <span class="token comment">// 尝试在锁的最高位上设置为1，如果设置成功，直接返回，无需多余操作</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">atomic_bit_test_set</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token comment">// 到这里表示，有线程已经占用了锁，那么将mutex加一用来记录有多少等待的线程</span>
    <span class="token function">atomic_increment</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 在第一次进来或每次醒来后，都去尝试获取一遍锁</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">atomic_bit_test_set</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 获取到锁之后，更新计数器</span>
            <span class="token function">atomic_decrement</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 当准备要休眠时，再一次确保当前锁的占用情况</span>
        v <span class="token operator">=</span> <span class="token operator">*</span>mutex<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token comment">// 休眠</span>
        <span class="token function">futex_wait</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">mutex_unlock</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>mutex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/* Adding 0x80000000 to the counter results in 0 if and only if
    there are not other interested threads */</span>
    <span class="token comment">// 如果只有自己占用锁，那么锁的大小应该是0x80000000，再加上0x80000000后，结果为0</span>
    <span class="token comment">// 那么就可以直接返回，如果还有等待的线程，就会继续向下走</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">atomic_add_zero</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">,</span> <span class="token number">0x80000000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    	<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token comment">// 唤醒其他线程</span>
    <span class="token function">futex_wake</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="并发数据结构" tabindex="-1"><a class="header-anchor" href="#并发数据结构" aria-hidden="true">#</a> 并发数据结构</h2><h3 id="计数器" tabindex="-1"><a class="header-anchor" href="#计数器" aria-hidden="true">#</a> 计数器</h3><p><strong>无锁计数器</strong></p><p>计数器是最常用的数据结构，下面是一个无锁的计数器实现：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">counter_t</span> <span class="token punctuation">{</span> 
    <span class="token keyword">int</span> value<span class="token punctuation">;</span> 
<span class="token punctuation">}</span> <span class="token class-name">counter_t</span><span class="token punctuation">;</span> 

<span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">counter_t</span> <span class="token operator">*</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    c<span class="token operator">-&gt;</span>value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 

<span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token class-name">counter_t</span> <span class="token operator">*</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    c<span class="token operator">-&gt;</span>value<span class="token operator">++</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 

<span class="token keyword">void</span> <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token class-name">counter_t</span> <span class="token operator">*</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    c<span class="token operator">-&gt;</span>value<span class="token operator">--</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 

<span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">counter_t</span> <span class="token operator">*</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">return</span> c<span class="token operator">-&gt;</span>value<span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>简单加锁的计数器</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">counter_t</span> <span class="token punctuation">{</span> 
    <span class="token keyword">int</span> value<span class="token punctuation">;</span> 
    <span class="token class-name">pthread_mutex_t</span> lock<span class="token punctuation">;</span> 
<span class="token punctuation">}</span> <span class="token class-name">counter_t</span><span class="token punctuation">;</span> 

<span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">counter_t</span> <span class="token operator">*</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    c<span class="token operator">-&gt;</span>value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
    <span class="token function">Pthread_mutex_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token operator">-&gt;</span>lock<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 

<span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token class-name">counter_t</span> <span class="token operator">*</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token function">Pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token operator">-&gt;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    c<span class="token operator">-&gt;</span>value<span class="token operator">++</span><span class="token punctuation">;</span> 
    <span class="token function">Pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token operator">-&gt;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 

<span class="token keyword">void</span> <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token class-name">counter_t</span> <span class="token operator">*</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token function">Pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token operator">-&gt;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    c<span class="token operator">-&gt;</span>value<span class="token operator">--</span><span class="token punctuation">;</span> 
    <span class="token function">Pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token operator">-&gt;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 

<span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">counter_t</span> <span class="token operator">*</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token function">Pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token operator">-&gt;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">int</span> rc <span class="token operator">=</span> c<span class="token operator">-&gt;</span>value<span class="token punctuation">;</span> 
    <span class="token function">Pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token operator">-&gt;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">return</span> rc<span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在临界区代码的周围加入锁，完成了线程安全的任务，但是性能低下。</p><p><strong>懒惰计数器</strong></p><p>我们可以创建一个全局计数器，以及若干的局部计数器，分别对全局计数器和局部计数器加不同的锁，这样锁的竞争就会降低，同时在一定数量之后局部计数器将数量同步给全局计数器。懒惰计数器就是在准确性和性能之间折中。我们称<strong>S</strong>为同步数量，S越大性能越好，但是全局计数器会有更高的延时。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">counter_t</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> global<span class="token punctuation">;</span> <span class="token comment">// global count</span>
    <span class="token class-name">pthread_mutex_t</span> glock<span class="token punctuation">;</span> <span class="token comment">// global lock</span>
    <span class="token keyword">int</span> local<span class="token punctuation">[</span>NUMCPUS<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// local count (per cpu)</span>
    <span class="token class-name">pthread_mutex_t</span> llock<span class="token punctuation">[</span>NUMCPUS<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// ... and locks</span>
    <span class="token keyword">int</span> threshold<span class="token punctuation">;</span> <span class="token comment">// update frequency</span>
<span class="token punctuation">}</span> <span class="token class-name">counter_t</span><span class="token punctuation">;</span>

<span class="token comment">// init: record threshold, init locks, init values</span>
<span class="token comment">// of all local counts and global count</span>
<span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">counter_t</span> <span class="token operator">*</span>c<span class="token punctuation">,</span> <span class="token keyword">int</span> threshold<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// threshold 就是S，同步数量</span>
    c<span class="token operator">-&gt;</span>threshold <span class="token operator">=</span> threshold<span class="token punctuation">;</span>
    c<span class="token operator">-&gt;</span>global <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token operator">-&gt;</span>glock<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUMCPUS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        c<span class="token operator">-&gt;</span>local<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token operator">-&gt;</span>llock<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span> 

<span class="token comment">// update: usually, just grab local lock and update local amount </span>
<span class="token comment">// once local count has risen by &#39;threshold&#39;, grab global </span>
<span class="token comment">// lock and transfer local values to it </span>
<span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">counter_t</span> <span class="token operator">*</span>c<span class="token punctuation">,</span> <span class="token keyword">int</span> threadID<span class="token punctuation">,</span> <span class="token keyword">int</span> amt<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token operator">-&gt;</span>llock<span class="token punctuation">[</span>threadID<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    c<span class="token operator">-&gt;</span>local<span class="token punctuation">[</span>threadID<span class="token punctuation">]</span> <span class="token operator">+=</span> amt<span class="token punctuation">;</span> <span class="token comment">// assumes amt &gt; 0 </span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>local<span class="token punctuation">[</span>threadID<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> c<span class="token operator">-&gt;</span>threshold<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// transfer to global </span>
        <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token operator">-&gt;</span>glock<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        c<span class="token operator">-&gt;</span>global <span class="token operator">+=</span> c<span class="token operator">-&gt;</span>local<span class="token punctuation">[</span>threadID<span class="token punctuation">]</span><span class="token punctuation">;</span> 
        <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token operator">-&gt;</span>glock<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        c<span class="token operator">-&gt;</span>local<span class="token punctuation">[</span>threadID<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
    <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token operator">-&gt;</span>llock<span class="token punctuation">[</span>threadID<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 

<span class="token comment">// get: just return global amount (which may not be perfect) </span>
<span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">counter_t</span> <span class="token operator">*</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token operator">-&gt;</span>glock<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">int</span> val <span class="token operator">=</span> c<span class="token operator">-&gt;</span>global<span class="token punctuation">;</span> 
    <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token operator">-&gt;</span>glock<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">return</span> val<span class="token punctuation">;</span> <span class="token comment">// only approximate! </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="链表" tabindex="-1"><a class="header-anchor" href="#链表" aria-hidden="true">#</a> 链表</h3><p>对于一个普通的链表，加上一个粗粒度的锁</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// basic node structure </span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">node_t</span> <span class="token punctuation">{</span> 
    <span class="token keyword">int</span> key<span class="token punctuation">;</span> 
    <span class="token keyword">struct</span> <span class="token class-name">node_t</span> <span class="token operator">*</span>next<span class="token punctuation">;</span> 
<span class="token punctuation">}</span> <span class="token class-name">node_t</span><span class="token punctuation">;</span> 

<span class="token comment">// basic list structure (one used per list) </span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">list_t</span> <span class="token punctuation">{</span> 
    <span class="token class-name">node_t</span> <span class="token operator">*</span>head<span class="token punctuation">;</span> 
    <span class="token class-name">pthread_mutex_t</span> lock<span class="token punctuation">;</span> 
<span class="token punctuation">}</span> <span class="token class-name">list_t</span><span class="token punctuation">;</span> 

<span class="token keyword">void</span> <span class="token function">List_Init</span><span class="token punctuation">(</span><span class="token class-name">list_t</span> <span class="token operator">*</span>L<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    L<span class="token operator">-&gt;</span>head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> 
    <span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>L<span class="token operator">-&gt;</span>lock<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 

<span class="token keyword">void</span> <span class="token function">List_Insert</span><span class="token punctuation">(</span><span class="token class-name">list_t</span> <span class="token operator">*</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token comment">// 我们只对需要进行保护的临界区代码进行加锁</span>
    <span class="token comment">// synchronization not needed </span>
    <span class="token class-name">node_t</span> <span class="token operator">*</span>new <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">node_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">if</span> <span class="token punctuation">(</span>new <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;malloc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token keyword">return</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
    new<span class="token operator">-&gt;</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span> 
    
    <span class="token comment">// just lock critical section </span>
    <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>L<span class="token operator">-&gt;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    new<span class="token operator">-&gt;</span>next <span class="token operator">=</span> L<span class="token operator">-&gt;</span>head<span class="token punctuation">;</span> 
    L<span class="token operator">-&gt;</span>head <span class="token operator">=</span> new<span class="token punctuation">;</span> 
    <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>L<span class="token operator">-&gt;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 

<span class="token keyword">int</span> <span class="token function">List_Lookup</span><span class="token punctuation">(</span><span class="token class-name">list_t</span> <span class="token operator">*</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token comment">// 初始化rv为-1，简化了错误处理</span>
    <span class="token keyword">int</span> rv <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> 
    <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>L<span class="token operator">-&gt;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token class-name">node_t</span> <span class="token operator">*</span>curr <span class="token operator">=</span> L<span class="token operator">-&gt;</span>head<span class="token punctuation">;</span> 
    <span class="token keyword">while</span> <span class="token punctuation">(</span>curr<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token keyword">if</span> <span class="token punctuation">(</span>curr<span class="token operator">-&gt;</span>key <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
            rv <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
            <span class="token keyword">break</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span> 
        curr <span class="token operator">=</span> curr<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
    <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>L<span class="token operator">-&gt;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">return</span> rv<span class="token punctuation">;</span> <span class="token comment">// now both success and failure </span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以对每个节点加一个锁，称为<strong>交替锁</strong>（hand-over-hand locking）。</p><h3 id="并发队列" tabindex="-1"><a class="header-anchor" href="#并发队列" aria-hidden="true">#</a> 并发队列</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">node_t</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> value<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">node_t</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token class-name">node_t</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">queue_t</span> <span class="token punctuation">{</span>
    <span class="token class-name">node_t</span> <span class="token operator">*</span>head<span class="token punctuation">;</span>
    <span class="token class-name">node_t</span> <span class="token operator">*</span>tail<span class="token punctuation">;</span>
    <span class="token class-name">pthread_mutex_t</span> headLock<span class="token punctuation">;</span>  <span class="token comment">// 头锁</span>
    <span class="token class-name">pthread_mutex_t</span> tailLock<span class="token punctuation">;</span>  <span class="token comment">// 尾锁</span>
<span class="token punctuation">}</span> <span class="token class-name">queue_t</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">Queue_Init</span><span class="token punctuation">(</span><span class="token class-name">queue_t</span> <span class="token operator">*</span>q<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">node_t</span> <span class="token operator">*</span>tmp <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">node_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    tmp<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    q<span class="token operator">-&gt;</span>head <span class="token operator">=</span> q<span class="token operator">-&gt;</span>tail <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
    <span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>q<span class="token operator">-&gt;</span>headLock<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>q<span class="token operator">-&gt;</span>tailLock<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">Queue_Enqueue</span><span class="token punctuation">(</span><span class="token class-name">queue_t</span> <span class="token operator">*</span>q<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">node_t</span> <span class="token operator">*</span>tmp <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">node_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>tmp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    tmp<span class="token operator">-&gt;</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span> 
    tmp<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> 
    
    <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>q<span class="token operator">-&gt;</span>tailLock<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    q<span class="token operator">-&gt;</span>tail<span class="token operator">-&gt;</span>next <span class="token operator">=</span> tmp<span class="token punctuation">;</span> 
    q<span class="token operator">-&gt;</span>tail <span class="token operator">=</span> tmp<span class="token punctuation">;</span> 
    <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>q<span class="token operator">-&gt;</span>tailLock<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 

<span class="token keyword">int</span> <span class="token function">Queue_Dequeue</span><span class="token punctuation">(</span><span class="token class-name">queue_t</span> <span class="token operator">*</span>q<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>q<span class="token operator">-&gt;</span>headLock<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token class-name">node_t</span> <span class="token operator">*</span>tmp <span class="token operator">=</span> q<span class="token operator">-&gt;</span>head<span class="token punctuation">;</span> 
    <span class="token class-name">node_t</span> <span class="token operator">*</span>newHead <span class="token operator">=</span> tmp<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span> 
    <span class="token keyword">if</span> <span class="token punctuation">(</span>newHead <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>q<span class="token operator">-&gt;</span>headLock<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// queue was empty </span>
    <span class="token punctuation">}</span> 
    <span class="token operator">*</span>value <span class="token operator">=</span> newHead<span class="token operator">-&gt;</span>value<span class="token punctuation">;</span> 
    q<span class="token operator">-&gt;</span>head <span class="token operator">=</span> newHead<span class="token punctuation">;</span> 
    <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>q<span class="token operator">-&gt;</span>headLock<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token function">free</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里没有对整个队列加锁，而是根据队列的FIFO性质，只对头和尾加锁，在插入和删除时，设置虚拟节点方便操作。</p><h3 id="并发hash" tabindex="-1"><a class="header-anchor" href="#并发hash" aria-hidden="true">#</a> 并发Hash</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BUCKETS</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span> </span></span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">hash_t</span> <span class="token punctuation">{</span> 
    <span class="token class-name">list_t</span> lists<span class="token punctuation">[</span>BUCKETS<span class="token punctuation">]</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> <span class="token class-name">hash_t</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">Hash_Init</span><span class="token punctuation">(</span><span class="token class-name">hash_t</span> <span class="token operator">*</span>H<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> BUCKETS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">List_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>H<span class="token operator">-&gt;</span>lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">Hash_Insert</span><span class="token punctuation">(</span><span class="token class-name">hash_t</span> <span class="token operator">*</span>H<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> bucket <span class="token operator">=</span> key <span class="token operator">%</span> BUCKETS<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">List_Insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>H<span class="token operator">-&gt;</span>lists<span class="token punctuation">[</span>bucket<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">Hash_Lookup</span><span class="token punctuation">(</span><span class="token class-name">hash_t</span> <span class="token operator">*</span>H<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> bucket <span class="token operator">=</span> key <span class="token operator">%</span> BUCKETS<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">List_Lookup</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>H<span class="token operator">-&gt;</span>lists<span class="token punctuation">[</span>bucket<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://blog-zzys.oss-cn-beijing.aliyuncs.com/articles/55dc7a9c77577cbf0bb343f05c5303c4.png" style="zoom:67%;"><h2 id="条件变量" tabindex="-1"><a class="header-anchor" href="#条件变量" aria-hidden="true">#</a> 条件变量</h2><p>处理线程的同步问题即解决一个线程和另一个线程之间的通信问题，通常的一种解决办法是<strong>条件变量</strong>（condition variable），条件变量是一个队列，当条件不满足时，线程会把自己加入队列中，并且进入等待状态。而其他的线程则可以改变条件，唤醒一个或多个等待的队列。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// pthread_cond_wait(pthread_cond_t *c, pthread_mutex_t *m);</span>
<span class="token comment">// pthread_cond_signal(pthread_cond_t *c);</span>

<span class="token keyword">int</span> done <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token class-name">pthread_mutex_t</span> m <span class="token operator">=</span> PTHREAD_MUTEX_INITIALIZER<span class="token punctuation">;</span>
<span class="token class-name">pthread_cond_t</span> c <span class="token operator">=</span> PTHREAD_COND_INITIALIZER<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">thr_exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    done <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 修改条件</span>
    <span class="token function">Pthread_cond_signal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 随机唤醒一个位于等待队列等待的线程</span>
    <span class="token function">Pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">child</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;child\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">thr_exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">thr_join</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token function">Pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">while</span> <span class="token punctuation">(</span>done <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">// 当条件不满足时，进入条件变量的队列中，并且线程进入wait状态，使用while可以防止虚假唤醒</span>
        <span class="token function">Pthread_cond_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token function">Pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;parent: begin\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token class-name">pthread_t</span> p<span class="token punctuation">;</span> 
    <span class="token function">Pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> child<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token function">thr_join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;parent: end\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这段代码中，<code>done</code>变量和锁是缺一不可的。</p>`,90),k=n("ul",null,[n("li",null,[s("没有"),n("code",null,"done"),s("变量：假设子线程创建出来就被直接执行，而父线程没有被执行，子线程在唤醒时就会发现没有等待的线程，而当父线程运行时，就会永远陷入等待。")]),n("li",null,[s("没有加锁操作：由于临界区的存在，当父线程判断"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"d"),n("mi",null,"o"),n("mi",null,"n"),n("mi",null,"e"),n("mo",null,"="),n("mo",null,"="),n("mn",null,"0")]),n("annotation",{encoding:"application/x-tex"},"done == 0")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6944em"}}),n("span",{class:"mord mathnormal"},"d"),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"=="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"0")])])]),s("后，由子线程运行并将其修改至1，这样父线程就会永久等待。")])],-1),r=a(`<h3 id="生产者-消费者模型-有界缓冲区" tabindex="-1"><a class="header-anchor" href="#生产者-消费者模型-有界缓冲区" aria-hidden="true">#</a> 生产者/消费者模型（有界缓冲区）</h3><p>存在一个或多个<strong>生产者</strong>（producer）向缓冲区中放入数据，一个或多个<strong>消费者</strong>（consumer）从缓冲区中取出数据。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> buffer<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 缓冲区</span>
<span class="token keyword">int</span> fill <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 当前写入的索引</span>
<span class="token keyword">int</span> use <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 当前读出的索引</span>
<span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 当前的元素的数量，通过count来确保数据的安全，不会被覆盖。</span>

<span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    buffer<span class="token punctuation">[</span>fill<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
    fill <span class="token operator">=</span> <span class="token punctuation">(</span>fill <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> MAX<span class="token punctuation">;</span>
    count<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> tmp <span class="token operator">=</span> buffer<span class="token punctuation">[</span>use<span class="token punctuation">]</span><span class="token punctuation">;</span>
    use <span class="token operator">=</span> <span class="token punctuation">(</span>use <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> MAX<span class="token punctuation">;</span>
    count<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> tmp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">cond_t</span> empty<span class="token punctuation">,</span> fill<span class="token punctuation">;</span>  <span class="token comment">// 两种类型的条件变量，分别用于消费者和生产者</span>
<span class="token class-name">mutex_t</span> mutex<span class="token punctuation">;</span> <span class="token comment">// 保证缓冲区的线程安全</span>
<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">producer</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> loops<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">Pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> MAX<span class="token punctuation">)</span>  <span class="token comment">// 当缓冲区的数量满了时，在empty队列上等待</span>
            <span class="token function">Pthread_cond_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>empty<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token function">put</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token function">Pthread_cond_signal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fill<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 随机唤醒一个等待的生产者线程</span>
        <span class="token function">Pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">consumer</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> loops<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">Pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> 
            <span class="token function">Pthread_cond_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fill<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token function">Pthread_cond_signal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>empty<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token function">Pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://blog-zzys.oss-cn-beijing.aliyuncs.com/articles/e7843d224c488deb6fce17e255a426cf.png" style="zoom:80%;"><blockquote><p><strong>覆盖条件</strong>（covering condition），即可以将一个条件变量上的所有线程唤醒。</p></blockquote><h2 id="信号量" tabindex="-1"><a class="header-anchor" href="#信号量" aria-hidden="true">#</a> 信号量</h2><p><strong>信号量</strong>（semaphore）是有一个整数值的对象，在 POSIX 标准中，是 sem_wait()和 sem_post()。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;semaphore.h&gt;</span> </span>
<span class="token comment">// sem_t 本质是一个长整型类型</span>
<span class="token class-name">sem_t</span> s<span class="token punctuation">;</span>  <span class="token comment">// 如果信号量为负数，那么它的绝对值就是等待的线程数</span>
<span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 第二个参数为0表示当前的信号量是单个进程内多线程共享的</span>

<span class="token keyword">int</span> <span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token class-name">sem_t</span> <span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token comment">// 为信号量减去一，如果结果为负数就将当前线程转换到等待状态</span>
<span class="token punctuation">}</span> 

<span class="token keyword">int</span> <span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token class-name">sem_t</span> <span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
	<span class="token comment">// 为信号量增加一，如果有线程在等待就唤醒一个</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="信号量实现锁" tabindex="-1"><a class="header-anchor" href="#信号量实现锁" aria-hidden="true">#</a> 信号量实现锁</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">sem_t</span> m<span class="token punctuation">;</span> 
<span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 注意这里的1</span>

<span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// critical section here </span>
<span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="信号量实现条件变量" tabindex="-1"><a class="header-anchor" href="#信号量实现条件变量" aria-hidden="true">#</a> 信号量实现条件变量</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">sem_t</span> s<span class="token punctuation">;</span> 

<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">child</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;child\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
	<span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> 
	<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
	<span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 注意这里的0</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;parent: begin\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
	<span class="token class-name">pthread_t</span> c<span class="token punctuation">;</span> 
	<span class="token function">Pthread_create</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> child<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
	<span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> 
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;parent: end\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="缓冲区" tabindex="-1"><a class="header-anchor" href="#缓冲区" aria-hidden="true">#</a> 缓冲区</h3><p>使用信号量模拟锁和条件变量来实现缓冲区模型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 注意这三个条件变量的初始化</span>
<span class="token class-name">sem_t</span> empty<span class="token punctuation">;</span> 
<span class="token class-name">sem_t</span> full<span class="token punctuation">;</span> 
<span class="token class-name">sem_t</span> mutex<span class="token punctuation">;</span> <span class="token comment">// 模拟互斥锁</span>

<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">producer</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">int</span> i<span class="token punctuation">;</span> 
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> loops<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>empty<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token function">put</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>full<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span> 

<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">consumer</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">int</span> i<span class="token punctuation">;</span> 
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> loops<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>full<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>empty<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span> 

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token comment">// ... </span>
    <span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>empty<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>full<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ... </span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="读写锁" tabindex="-1"><a class="header-anchor" href="#读写锁" aria-hidden="true">#</a> 读写锁</h3><p>支持一写或多读。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_rwlock_t</span> <span class="token punctuation">{</span>
    <span class="token class-name">sem_t</span> lock<span class="token punctuation">;</span> <span class="token comment">// binary semaphore (basic lock)</span>
    <span class="token class-name">sem_t</span> writelock<span class="token punctuation">;</span> <span class="token comment">// used to allow ONE writer or MANY readers</span>
    <span class="token keyword">int</span> readers<span class="token punctuation">;</span> <span class="token comment">// 记录当前的读线程数</span>
<span class="token punctuation">}</span> <span class="token class-name">rwlock_t</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">rwlock_init</span><span class="token punctuation">(</span><span class="token class-name">rwlock_t</span> <span class="token operator">*</span>rw<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    rw<span class="token operator">-&gt;</span>readers <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token operator">-&gt;</span>lock<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token operator">-&gt;</span>writelock<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">rwlock_acquire_readlock</span><span class="token punctuation">(</span><span class="token class-name">rwlock_t</span> <span class="token operator">*</span>rw<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token operator">-&gt;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    rw<span class="token operator">-&gt;</span>readers<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rw<span class="token operator">-&gt;</span>readers <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
    	<span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token operator">-&gt;</span>writelock<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 第一个读线程同时获得写锁</span>
    <span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token operator">-&gt;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">rwlock_release_readlock</span><span class="token punctuation">(</span><span class="token class-name">rwlock_t</span> <span class="token operator">*</span>rw<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token operator">-&gt;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    rw<span class="token operator">-&gt;</span>readers<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rw<span class="token operator">-&gt;</span>readers <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token operator">-&gt;</span>writelock<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 最后一个读线程释放写锁</span>
    <span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token operator">-&gt;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">rwlock_acquire_writelock</span><span class="token punctuation">(</span><span class="token class-name">rwlock_t</span> <span class="token operator">*</span>rw<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token operator">-&gt;</span>writelock<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">rwlock_release_writelock</span><span class="token punctuation">(</span><span class="token class-name">rwlock_t</span> <span class="token operator">*</span>rw<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token operator">-&gt;</span>writelock<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18),d={href:"https://www.zhihu.com/question/481951579",target:"_blank",rel:"noopener noreferrer"},m=a(`<h2 id="并发问题" tabindex="-1"><a class="header-anchor" href="#并发问题" aria-hidden="true">#</a> 并发问题</h2><h3 id="非死锁缺陷" tabindex="-1"><a class="header-anchor" href="#非死锁缺陷" aria-hidden="true">#</a> 非死锁缺陷</h3><p><strong>违反原子性</strong>（atomicity violation）缺陷和<strong>错误顺序</strong>（order violation）缺陷。一个可以理解为没有满足<strong>互斥</strong>，另一个是没有满足<strong>同步</strong>。</p><h4 id="违反原子性" tabindex="-1"><a class="header-anchor" href="#违反原子性" aria-hidden="true">#</a> 违反原子性</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token comment">// T1</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token comment">// T2</span>
i <span class="token operator">=</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码就会出现并发问题，解决办法很简单，加入一个互斥锁就好了，当然亦可以采用其他的互斥策略，如CAS。</p><h4 id="错误顺序" tabindex="-1"><a class="header-anchor" href="#错误顺序" aria-hidden="true">#</a> 错误顺序</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token comment">// T1</span>
<span class="token keyword">int</span> <span class="token function">t1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// main</span>
<span class="token keyword">int</span> <span class="token function">mMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">create_thread</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里假设了T1线程会先运行，所以有可能会发生并发问题，可以采用信号量等同步策略。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> mtInit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token class-name">pthread_mutex_t</span> mtLock <span class="token operator">=</span> PTHREAD_MUTEX_INITIALIZER<span class="token punctuation">;</span> 
<span class="token class-name">pthread_cond_t</span> mtCond <span class="token operator">=</span> PTHREAD_COND_INITIALIZER<span class="token punctuation">;</span>
<span class="token comment">// T1</span>
<span class="token keyword">int</span> <span class="token function">t1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mtLock<span class="token punctuation">)</span><span class="token punctuation">;</span>	
    i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    mtInit <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">pthread_cond_signal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mtCond<span class="token punctuation">)</span><span class="token punctuation">;</span> 
	<span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mtLock<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>

<span class="token comment">// main</span>
<span class="token keyword">int</span> <span class="token function">mMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">create_thread</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mtLock<span class="token punctuation">)</span><span class="token punctuation">;</span> 
	<span class="token keyword">while</span> <span class="token punctuation">(</span>mtInit <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> 
		<span class="token function">pthread_cond_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mtCond<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mtLock<span class="token punctuation">)</span><span class="token punctuation">;</span> 
	<span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mtLock<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token function">assert</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="死锁" tabindex="-1"><a class="header-anchor" href="#死锁" aria-hidden="true">#</a> 死锁</h3><img src="https://blog-zzys.oss-cn-beijing.aliyuncs.com/articles/4e568a9b76263b80af55dd043a606eb9.png" alt="image-20230906103302075" style="zoom:67%;"><h4 id="条件" tabindex="-1"><a class="header-anchor" href="#条件" aria-hidden="true">#</a> 条件</h4><p>只要有一个条件不满足，就不会发生死锁。</p><ul><li>互斥：线程对于需要的资源进行互斥的访问（例如一个线程抢到锁）。</li><li>持有并等待：线程持有了资源（例如已将持有的锁），同时又在等待其他资源（例如，需要获得的锁）。</li><li>非抢占：线程获得的资源（例如锁），不能被抢占。</li><li>循环等待：线程之间存在一个环路，环路上每个线程都额外持有一个资源，而这 个资源又是下一个线程要申请的。</li></ul><h4 id="预防" tabindex="-1"><a class="header-anchor" href="#预防" aria-hidden="true">#</a> 预防</h4><p><strong>循环等待</strong></p><p>可以采用一定的顺序加锁，如<strong>全序</strong>（total ordering）或<strong>偏序</strong>（partial）加锁。</p><blockquote><p>一条路有两个方向，一辆车要通过这条路需要同时从一个方向往另一个方向开，如果两辆车相向而行，那就是死锁，如果两辆车同向行驶，那就不会死锁</p></blockquote><p><strong>持有并等待</strong></p><p>我们可以在最开始，把所有需要用到的锁全部申请，例如设置一个全局锁，在临界区内将所有需要的资源全部申请。</p><p><strong>非抢占</strong></p><p>普通的抢占锁在获取锁失败后会陷入阻塞，可以采用尝试获取锁的方式<code>tryLock</code>，当抢占锁失败后返回<code>-1</code>。</p><p><strong>互斥</strong></p><p>采用无锁并发的思想，利用<code>CAS</code>来预防死锁。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">AtomicIncrement</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>value<span class="token punctuation">,</span> <span class="token keyword">int</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
	<span class="token keyword">do</span> <span class="token punctuation">{</span> 
		<span class="token keyword">int</span> old <span class="token operator">=</span> <span class="token operator">*</span>value<span class="token punctuation">;</span> 
	<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">CompareAndSwap</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> old<span class="token punctuation">,</span> old <span class="token operator">+</span> amount<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>调度实现</strong></p><p>一是将需要不同资源的线程分时进行。</p><p><img src="https://blog-zzys.oss-cn-beijing.aliyuncs.com/articles/5110733ac7f446ea2bbf95b448c0ca68.png" alt="image-20230906105328627" loading="lazy"></p><p>二是将需要相同资源的线程使用统一CPU执行。</p><p><img src="https://blog-zzys.oss-cn-beijing.aliyuncs.com/articles/6e88d2cd67769acd97cb0e6ddde631ee.png" alt="image-20230906105340938" loading="lazy"></p>`,31);function v(b,h){const p=e("ExternalLinkIcon");return o(),c("div",null,[u,k,r,n("p",null,[n("a",d,[s("信号量和条件变量的关系是什么？"),l(p)])]),m])}const f=t(i,[["render",v],["__file","ostep-concurrency.html.vue"]]);export{f as default};
