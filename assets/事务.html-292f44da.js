import{_ as t,o as e,c as a,e as n}from"./app-20538318.js";const s={},i=n(`<p>本章介绍有关于MySQL事务的相关知识。</p><h2 id="事务简介" tabindex="-1"><a class="header-anchor" href="#事务简介" aria-hidden="true">#</a> 事务简介</h2><p>事务时一组操作的集合，它是一种<strong>不可分割</strong>的工作单位。事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作<strong>要么同时成功，要么同时失败</strong>。</p><h2 id="事务简单使用" tabindex="-1"><a class="header-anchor" href="#事务简单使用" aria-hidden="true">#</a> 事务简单使用</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span>
<span class="token keyword">update</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
<span class="token keyword">update</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
<span class="token comment">-- 无异常时手动提交</span>
<span class="token keyword">commit</span><span class="token punctuation">;</span>
<span class="token comment">-- 有异常时回滚</span>
<span class="token keyword">rollback</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四大特性" tabindex="-1"><a class="header-anchor" href="#四大特性" aria-hidden="true">#</a> 四大特性</h2><ul><li>原子性：事务时不可分割的最小操作单元，要么全部成功，要么全部失败</li><li>一致性：事务完成时，必须使所有的数据都保存一致状态。</li><li>隔离性：数据库系统提供隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。</li><li>持久性：事务一旦提交或回滚，它对数据库中的改变就是永久的。</li></ul><h2 id="并发事务问题" tabindex="-1"><a class="header-anchor" href="#并发事务问题" aria-hidden="true">#</a> 并发事务问题</h2><p>由多个并发的事务引发的问题。</p><h3 id="脏读" tabindex="-1"><a class="header-anchor" href="#脏读" aria-hidden="true">#</a> 脏读</h3><p>一个事务读到另一个事务尚未提交的数据。</p><p>没有commit就可以被其他的事务所读。</p><img src="https://blog-zzys.oss-cn-beijing.aliyuncs.com/articles/7309f8bcd8b37fd968ed94250d34c7bb.png" alt="image-20230813211819355" style="zoom:67%;"><h3 id="不可重复读" tabindex="-1"><a class="header-anchor" href="#不可重复读" aria-hidden="true">#</a> 不可重复读</h3><p>一个事务先后读取同一条记录，但两次读取的数据不同。</p><p>commit被其他的事务所读。但是其他的事务还未结束。</p><img src="https://blog-zzys.oss-cn-beijing.aliyuncs.com/articles/1da38a6f4a041c8cca421a2e505253ef.png" alt="image-20230813211840507" style="zoom:67%;"><h3 id="幻读" tabindex="-1"><a class="header-anchor" href="#幻读" aria-hidden="true">#</a> 幻读</h3><p>一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时，又发现这行数据已存在，好像出现幻影。</p><img src="https://blog-zzys.oss-cn-beijing.aliyuncs.com/articles/d2e79f57ca421280b1b9dbcd00db5a4d.png" alt="image-20230813211932033" style="zoom:67%;"><h2 id="事务隔离级别" tabindex="-1"><a class="header-anchor" href="#事务隔离级别" aria-hidden="true">#</a> 事务隔离级别</h2><p>隔离级别越高，性能越低，安全性越高。</p><table><thead><tr><th style="text-align:center;">隔离级别</th><th style="text-align:center;">脏读</th><th style="text-align:center;">不可重复读</th><th style="text-align:center;">幻读</th></tr></thead><tbody><tr><td style="text-align:center;">Read uncommitted</td><td style="text-align:center;">可以</td><td style="text-align:center;">可以</td><td style="text-align:center;">可以</td></tr><tr><td style="text-align:center;">Read committed（Orcale默认）</td><td style="text-align:center;">不可以</td><td style="text-align:center;">可以</td><td style="text-align:center;">可以</td></tr><tr><td style="text-align:center;">Repeatable Read（MySQL默认）</td><td style="text-align:center;">不可以</td><td style="text-align:center;">不可以</td><td style="text-align:center;">可以</td></tr><tr><td style="text-align:center;">Serializable</td><td style="text-align:center;">不可以</td><td style="text-align:center;">不可以</td><td style="text-align:center;">不可以</td></tr></tbody></table>`,23),l=[i];function d(c,r){return e(),a("div",null,l)}const p=t(s,[["render",d],["__file","事务.html.vue"]]);export{p as default};
